// ==================== apps/bot/src/commands/start.command.ts ====================

import { CommandContext } from 'grammy';
import { MyContext } from '../core/types';
import { apiClient } from '../core/api/client';
import { InlineKeyboard } from 'grammy';
import { EMOJI, ORDER_STATUS_LABELS, FormatUtils } from '@cargoexpress/shared';
import { logger } from '../core/logger';

export async function handleStart(ctx: CommandContext<MyContext>) {
  try {
    const userId = ctx.from?.id;
    
    if (!userId) return;
    
    // Check if user exists
    let user = null;
    try {
      user = await apiClient.getUserByTelegramId(userId);
    } catch (error) {
      // User doesn't exist
    }
    
    if (user) {
      // User already registered
      ctx.session.isRegistered = true;
      ctx.session.userId = user.id;
      
      const mainKeyboard = new InlineKeyboard()
        .text(`${EMOJI.SHIPPING} –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É`, 'shipping').row()
        .text(`${EMOJI.PURCHASE} –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä`, 'purchase').row()
        .text(`${EMOJI.CALCULATOR} –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä`, 'calculator')
        .text(`${EMOJI.SUPPORT} –ü–æ–¥–¥–µ—Ä–∂–∫–∞`, 'support').row()
        .text(`${EMOJI.PROFILE} –ü—Ä–æ—Ñ–∏–ª—å`, 'profile')
        .text(`${EMOJI.PACKAGE} –ó–∞–∫–∞–∑—ã`, 'my_orders');
      
      await ctx.reply(
        `${EMOJI.FIRE} <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.firstName}!</b>\n\n` +
        
        `üÜî –í–∞—à ID: <code>${user.id}</code>\n` +
        `üì¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${user.activeOrders || 0}\n` +
        `üí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance || 0} ‚ÇΩ\n\n` +
        
        `<b>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?</b>`,
        { reply_markup: mainKeyboard }
      );
    } else {
      // New user - start registration
      const startKeyboard = new InlineKeyboard()
        .text(`${EMOJI.SUCCESS} –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é`, 'start_registration')
        .row()
        .text(`${EMOJI.INFO} –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ`, 'about_service');
      
      await ctx.reply(
        `${EMOJI.FIRE} <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CargoExpress!</b>\n\n` +
        
        `–ú—ã - –Ω–∞–¥–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.\n\n` +
        
        `<b>–ù–∞—à–∏ —É—Å–ª—É–≥–∏:</b>\n` +
        `${EMOJI.SHIPPING} –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ—Å—ã–ª–æ–∫ –∏–∑ –°–®–ê, –ö–∏—Ç–∞—è, –¢—É—Ä—Ü–∏–∏ –∏ –ï–≤—Ä–æ–ø—ã\n` +
        `${EMOJI.PURCHASE} –í—ã–∫—É–ø —Ç–æ–≤–∞—Ä–æ–≤ —Å –ª—é–±—ã—Ö –∑–∞—Ä—É–±–µ–∂–Ω—ã—Ö —Å–∞–π—Ç–æ–≤\n` +
        `${EMOJI.CALCULATOR} –¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏\n` +
        `${EMOJI.SUPPORT} –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\n` +
        
        `<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n` +
        `‚úÖ –ù–∏–∑–∫–∏–µ —Ü–µ–Ω—ã - –æ—Ç 8$/–∫–≥\n` +
        `‚úÖ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ - –æ—Ç 7 –¥–Ω–µ–π\n` +
        `‚úÖ –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –ø–æ—Å—ã–ª–æ–∫\n` +
        `‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n` +
        `‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ 30 –¥–Ω–µ–π\n\n` +
        
        `–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.`,
        { reply_markup: startKeyboard }
      );
    }
    
    // Handle deep link parameters
    const startParam = ctx.match;
    if (startParam) {
      // Handle referral codes, order tracking, etc.
      if (startParam.startsWith('ref_')) {
        const refCode = startParam.replace('ref_', '');
        ctx.session.tempData = { referralCode: refCode };
        await ctx.reply(
          `${EMOJI.STAR} –í—ã –ø—Ä–∏—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n` +
          `–ö–æ–¥ ${refCode} –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.`
        );
      } else if (startParam.startsWith('track_')) {
        const trackNumber = startParam.replace('track_', '');
        // Show order tracking
        await handleTrackOrder(ctx, trackNumber);
      }
    }
    
  } catch (error) {
    logger.error('Start command error:', error);
    await ctx.reply(
      `${EMOJI.ERROR} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n` +
      `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`
    );
  }
}

async function handleTrackOrder(ctx: MyContext, trackNumber: string) {
  try {
    const order = await apiClient.getOrderByTrackNumber(trackNumber);
    
    if (!order) {
      await ctx.reply(
        `${EMOJI.ERROR} –ó–∞–∫–∞–∑ —Å —Ç—Ä–µ–∫–æ–º ${trackNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω.`
      );
      return;
    }
    
    // Show public tracking info
    await ctx.reply(
      `${EMOJI.PACKAGE} <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏</b>\n\n` +
      `–¢—Ä–µ–∫: <code>${trackNumber}</code>\n` +
      `–°—Ç–∞—Ç—É—Å: ${ORDER_STATUS_LABELS[order.status as keyof typeof ORDER_STATUS_LABELS]}\n` +
      `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${FormatUtils.formatDate(order.updatedAt)}\n\n` +
      `–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.`
    );
    
  } catch (error) {
    logger.error('Track order error:', error);
    await ctx.reply(`${EMOJI.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ.`);
  }
}

