// ==================== apps/bot/src/conversations/calculator.conversation.ts ====================

import { Conversation } from '@grammyjs/conversations';
import { MyContext } from '../core/types';
import { apiClient } from '../core/api/client';
import { InlineKeyboard } from 'grammy';
import {
  EMOJI,
  CalculationUtils,
  FormatUtils
} from '@cargoexpress/shared';
import { logger } from '../core/logger';

export async function calculatorConversation(
  conversation: Conversation<MyContext>,
  ctx: MyContext
) {
  try {
    const typeKeyboard = new InlineKeyboard()
      .text('‚úàÔ∏è –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ—Å—ã–ª–∫–∏', 'calc_shipping').row()
      .text('üõç –í—ã–∫—É–ø —Ç–æ–≤–∞—Ä–∞', 'calc_purchase').row()
      .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel');
    
    const typeMsg = await ctx.reply(
      `${EMOJI.CALCULATOR} <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏</b>\n\n` +
      `–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å?`,
      { reply_markup: typeKeyboard }
    );
    
    const typeCtx = await conversation.waitForCallbackQuery(/^(calc_|cancel)/);
    await typeCtx.answerCallbackQuery();
    
    if (typeCtx.callbackQuery.data === 'cancel') {
      await ctx.api.deleteMessage(ctx.chat!.id, typeMsg.message_id);
      await ctx.reply('–†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω');
      return;
    }
    
    const calcType = typeCtx.callbackQuery.data.replace('calc_', '');
    
    if (calcType === 'shipping') {
      await calculateShipping(conversation, ctx, typeMsg.message_id);
    } else {
      await calculatePurchase(conversation, ctx, typeMsg.message_id);
    }
    
  } catch (error) {
    logger.error('Calculator conversation error:', error);
    await ctx.reply(`${EMOJI.ERROR} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ.`);
  }
}

async function calculateShipping(
  conversation: Conversation<MyContext>,
  ctx: MyContext,
  messageId: number
) {
  // Select country
  const countries = await apiClient.getCountries(true);
  const shippingCountries = countries.filter(c => c.shippingAvailable);
  
  const countryKeyboard = new InlineKeyboard();
  shippingCountries.forEach((country, index) => {
    countryKeyboard.text(
      `${country.flagEmoji} ${country.name}`,
      `calc_country_${country.id}`
    );
    if ((index + 1) % 2 === 0) {
      countryKeyboard.row();
    }
  });
  
  await ctx.api.editMessageText(
    ctx.chat!.id,
    messageId,
    `${EMOJI.CALCULATOR} <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n` +
    `–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:`,
    {
      reply_markup: countryKeyboard,
      parse_mode: 'HTML'
    }
  );
  
  const countryCtx = await conversation.waitForCallbackQuery(/^calc_country_/);
  await countryCtx.answerCallbackQuery();
  
  const countryId = parseInt(countryCtx.callbackQuery.data.replace('calc_country_', ''));
  const country = shippingCountries.find(c => c.id === countryId);
  
  // Enter weight
  await ctx.api.editMessageText(
    ctx.chat!.id,
    messageId,
    `${EMOJI.CALCULATOR} <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ ${country?.name}</b>\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Å—ã–ª–∫–∏ –≤ –∫–≥:`,
    { parse_mode: 'HTML' }
  );

  const weightCtx = await conversation.wait();
  const weightText = weightCtx.message?.text || '0';
  const weight = parseFloat(weightText.replace(',', '.'));
  
  if (isNaN(weight) || weight <= 0) {
    await ctx.reply(`${EMOJI.ERROR} –ù–µ–≤–µ—Ä–Ω—ã–π –≤–µ—Å`);
    return calculateShipping(conversation, ctx, messageId);
  }
  
  // Optional dimensions
  const dimKeyboard = new InlineKeyboard()
    .text('–£–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã', 'calc_dim_yes')
    .text('–¢–æ–ª—å–∫–æ –≤–µ—Å', 'calc_dim_no');
  
  await ctx.reply(
    '–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞?',
    { reply_markup: dimKeyboard }
  );
  
  const dimCtx = await conversation.waitForCallbackQuery(/^calc_dim_/);
  await dimCtx.answerCallbackQuery();
  
  let volumeWeight = 0;
  
  if (dimCtx.callbackQuery.data === 'calc_dim_yes') {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É (—Å–º):');
    const lengthCtx = await conversation.wait();
    const length = parseFloat(lengthCtx.message?.text || '0');

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É (—Å–º):');
    const widthCtx = await conversation.wait();
    const width = parseFloat(widthCtx.message?.text || '0');

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É (—Å–º):');
    const heightCtx = await conversation.wait();
    const height = parseFloat(heightCtx.message?.text || '0');

    volumeWeight = CalculationUtils.calculateVolumetricWeight(
      length, width, height
    );
  }

  // Enter declared value
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö:');
  const valueCtx = await conversation.wait();
  const valueText = valueCtx.message?.text || '0';
  const declaredValue = parseFloat(valueText);
  
  // Calculate
  const calculation = await apiClient.calculateShipping({
    fromCountryId: countryId,
    weight,
    length: volumeWeight > 0 ? 100 : undefined,
    width: volumeWeight > 0 ? 100 : undefined,
    height: volumeWeight > 0 ? 100 : undefined,
    declaredValue
  });
  
  // Show results
  let message = `${EMOJI.CALCULATOR} <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞</b>\n\n`;
  message += `<b>–ú–∞—Ä—à—Ä—É—Ç:</b> ${country?.flagEmoji} ${country?.name} ‚Üí üá∑üá∫ –†–æ—Å—Å–∏—è\n`;
  message += `<b>–í–µ—Å:</b> ${FormatUtils.formatWeight(weight)}\n`;
  
  if (volumeWeight > 0) {
    message += `<b>–û–±—ä–µ–º–Ω—ã–π –≤–µ—Å:</b> ${FormatUtils.formatWeight(volumeWeight)}\n`;
    message += `<b>–ö –æ–ø–ª–∞—Ç–µ:</b> ${FormatUtils.formatWeight(Math.max(weight, volumeWeight))}\n`;
  }
  
  message += `<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:</b> $${declaredValue}\n\n`;
  
  message += `<b>üìä –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n\n`;
  
  for (const option of calculation.options) {
    message += `<b>${option.name}</b>\n`;
    message += `–°—Ä–æ–∫: ${option.deliveryDays}\n`;
    message += `–î–æ—Å—Ç–∞–≤–∫–∞: ${FormatUtils.formatMoney(option.shippingCost)}\n`;
    
    if (option.customsFee > 0) {
      message += `–¢–∞–º–æ–∂–Ω—è: ${FormatUtils.formatMoney(option.customsFee)}\n`;
    }
    
    message += `<b>–ò—Ç–æ–≥–æ: ${FormatUtils.formatMoney(option.totalCost)}</b>\n\n`;
  }
  
  const resultKeyboard = new InlineKeyboard()
    .text('‚úàÔ∏è –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', 'create_shipping_order').row()
    .text('üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç', 'calculator').row()
    .text('‚ùå –ó–∞–∫—Ä—ã—Ç—å', 'close');
  
  await ctx.reply(message, { reply_markup: resultKeyboard });
}

async function calculatePurchase(
  conversation: Conversation<MyContext>,
  ctx: MyContext,
  messageId: number
) {
  // Select country
  const countries = await apiClient.getCountries(true);
  const purchaseCountries = countries.filter(c => c.purchaseAvailable);
  
  const countryKeyboard = new InlineKeyboard();
  purchaseCountries.forEach((country, index) => {
    countryKeyboard.text(
      `${country.flagEmoji} ${country.name}`,
      `calc_pcountry_${country.id}`
    );
    if ((index + 1) % 2 === 0) {
      countryKeyboard.row();
    }
  });
  
  await ctx.api.editMessageText(
    ctx.chat!.id,
    messageId,
    `${EMOJI.CALCULATOR} <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—ã–∫—É–ø–∞</b>\n\n` +
    `–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä?`,
    {
      reply_markup: countryKeyboard,
      parse_mode: 'HTML'
    }
  );
  
  const countryCtx = await conversation.waitForCallbackQuery(/^calc_pcountry_/);
  await countryCtx.answerCallbackQuery();
  
  const countryId = parseInt(countryCtx.callbackQuery.data.replace('calc_pcountry_', ''));
  const country = purchaseCountries.find(c => c.id === countryId);
  
  // Enter product cost
  await ctx.api.editMessageText(
    ctx.chat!.id,
    messageId,
    `${EMOJI.CALCULATOR} <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—ã–∫—É–ø–∞ –≤ ${country?.name}</b>\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö:`,
    { parse_mode: 'HTML' }
  );

  const costCtx = await conversation.wait();
  const costText = costCtx.message?.text || '0';
  const productCost = parseFloat(costText);

  if (isNaN(productCost) || productCost <= 0) {
    await ctx.reply(`${EMOJI.ERROR} –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å`);
    return calculatePurchase(conversation, ctx, messageId);
  }

  // Enter quantity
  await ctx.reply('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:');
  const quantityCtx = await conversation.wait();
  const quantityText = quantityCtx.message?.text || '1';
  const quantity = parseInt(quantityText) || 1;
  
  // Calculate
  const calculation = await apiClient.calculatePurchase({
    countryId,
    productCost,
    quantity
  });
  
  // Show results
  await ctx.reply(
    `${EMOJI.CALCULATOR} <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –≤—ã–∫—É–ø–∞</b>\n\n` +
    
    `<b>–°—Ç—Ä–∞–Ω–∞:</b> ${country?.flagEmoji} ${country?.name}\n` +
    `<b>–¢–æ–≤–∞—Ä:</b> $${productCost} √ó ${quantity} —à—Ç.\n\n` +
    
    `<b>–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:</b>\n` +
    `–¢–æ–≤–∞—Ä: ${FormatUtils.formatMoney(productCost * quantity * calculation.exchangeRate)}\n` +
    `–ö–æ–º–∏—Å—Å–∏—è (${country?.purchaseCommission}%): ${FormatUtils.formatMoney(calculation.commission)}\n` +
    `–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ —Å–∫–ª–∞–¥–∞: ${FormatUtils.formatMoney(calculation.domesticShipping || 0)}\n` +
    `<b>–ò—Ç–æ–≥–æ: ${FormatUtils.formatMoney(calculation.totalCost)}</b>\n\n` +
    
    `${EMOJI.INFO} <b>–í–∞–∂–Ω–æ:</b>\n` +
    `‚Ä¢ –≠—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–∫—É–ø–∞\n` +
    `‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –≤ –†–æ—Å—Å–∏—é –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ\n` +
    `‚Ä¢ –¢–æ–≤–∞—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥ –≤ ${country?.name}\n` +
    `‚Ä¢ –°—Ä–æ–∫ –≤—ã–∫—É–ø–∞: 1-3 –¥–Ω—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã`,
    {
      reply_markup: new InlineKeyboard()
        .text('üõç –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', 'create_purchase_order').row()
        .text('üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç', 'calculator').row()
        .text('‚ùå –ó–∞–∫—Ä—ã—Ç—å', 'close')
    }
  );
}

