// ==================== apps/bot/src/conversations/settings.conversation.ts ====================

import { Conversation } from '@grammyjs/conversations';
import { MyContext } from '../core/types';
import { apiClient } from '../core/api/client';
import { InlineKeyboard } from 'grammy';
import { EMOJI, ValidationUtils } from '@cargoexpress/shared';
import { logger } from '../core/logger';

export async function settingsConversation(
  conversation: Conversation<MyContext>,
  ctx: MyContext
) {
  try {
    const settingsKeyboard = new InlineKeyboard()
      .text('üåê –Ø–∑—ã–∫', 'settings_language').row()
      .text('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'settings_notifications').row()
      .text('üìß –ò–∑–º–µ–Ω–∏—Ç—å email', 'settings_email').row()
      .text('üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', 'settings_phone').row()
      .text('üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', 'settings_delete').row()
      .text('‚ùå –ó–∞–∫—Ä—ã—Ç—å', 'close');
    
    const settingsMsg = await ctx.reply(
      `${EMOJI.SETTINGS} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:`,
      { reply_markup: settingsKeyboard }
    );
    
    const settingCtx = await conversation.waitForCallbackQuery(/^settings_|close/);
    await settingCtx.answerCallbackQuery();
    
    if (settingCtx.callbackQuery.data === 'close') {
      await ctx.api.deleteMessage(ctx.chat!.id, settingsMsg.message_id);
      return;
    }
    
    const setting = settingCtx.callbackQuery.data.replace('settings_', '');
    
    switch (setting) {
      case 'language':
        await changeLanguage(conversation, ctx);
        break;
      case 'notifications':
        await changeNotifications(conversation, ctx);
        break;
      case 'email':
        await changeEmail(conversation, ctx);
        break;
      case 'phone':
        await changePhone(conversation, ctx);
        break;
      case 'delete':
        await deleteAccount(conversation, ctx);
        break;
    }
    
  } catch (error) {
    logger.error('Settings conversation error:', error);
    await ctx.reply(`${EMOJI.ERROR} –û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.`);
  }
}

async function changeLanguage(conversation: Conversation<MyContext>, ctx: MyContext) {
  const langKeyboard = new InlineKeyboard()
    .text('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru')
    .text('üá¨üáß English', 'lang_en').row()
    .text('üá®üá≥ ‰∏≠Êñá', 'lang_zh')
    .text('üáπüá∑ T√ºrk√ße', 'lang_tr').row()
    .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel');
  
  await ctx.reply(
    'üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:',
    { reply_markup: langKeyboard }
  );
  
  const langCtx = await conversation.waitForCallbackQuery(/^lang_|cancel/);
  await langCtx.answerCallbackQuery();
  
  if (langCtx.callbackQuery.data === 'cancel') {
    await ctx.reply('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
    return;
  }
  
  const language = langCtx.callbackQuery.data.replace('lang_', '');
  
  await apiClient.updateUser(ctx.session.userId!, { language });
  ctx.session.language = language;
  
  await ctx.reply(`‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${language}`);
}

async function changeNotifications(conversation: Conversation<MyContext>, ctx: MyContext) {
  const notifKeyboard = new InlineKeyboard()
    .text('‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'notif_all').row()
    .text('üì¶ –¢–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã', 'notif_orders').row()
    .text('üí∞ –¢–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂–∏', 'notif_payments').row()
    .text('üîï –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ', 'notif_none').row()
    .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel');
  
  await ctx.reply(
    'üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:',
    { reply_markup: notifKeyboard }
  );
  
  const notifCtx = await conversation.waitForCallbackQuery(/^notif_|cancel/);
  await notifCtx.answerCallbackQuery();
  
  if (notifCtx.callbackQuery.data === 'cancel') {
    return;
  }
  
  const notifType = notifCtx.callbackQuery.data.replace('notif_', '');
  
  // Save notification preferences
  await apiClient.updateUserSettings(ctx.session.userId!, {
    notifications: notifType
  });
  
  await ctx.reply('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
}

async function changeEmail(conversation: Conversation<MyContext>, ctx: MyContext) {
  await ctx.reply('üìß –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:');

  const emailCtx = await conversation.wait();
  const email = emailCtx.message?.text || '';

  if (!ValidationUtils.isValidEmail(email)) {
    await ctx.reply(`${EMOJI.ERROR} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email`);
    return;
  }

  await apiClient.updateUser(ctx.session.userId!, { email });

  await ctx.reply(`‚úÖ Email –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${email}`);
}

async function changePhone(conversation: Conversation<MyContext>, ctx: MyContext) {
  await ctx.reply('üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');

  const phoneCtx = await conversation.wait();
  const phone = phoneCtx.message?.text || '';

  if (!ValidationUtils.isValidPhone(phone)) {
    await ctx.reply(`${EMOJI.ERROR} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞`);
    return;
  }

  await apiClient.updateUser(ctx.session.userId!, { phone });

  await ctx.reply(`‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${phone}`);
}

async function deleteAccount(conversation: Conversation<MyContext>, ctx: MyContext) {
  const confirmKeyboard = new InlineKeyboard()
    .text('‚ö†Ô∏è –î–∞, —É–¥–∞–ª–∏—Ç—å', 'confirm_delete')
    .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel');
  
  await ctx.reply(
    `‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n` +
    `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç?\n` +
    `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!\n\n` +
    `–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:\n` +
    `‚Ä¢ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n` +
    `‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤\n` +
    `‚Ä¢ –ë–∞–ª–∞–Ω—Å –∏ –±–æ–Ω—É—Å—ã`,
    { reply_markup: confirmKeyboard }
  );
  
  const confirmCtx = await conversation.waitForCallbackQuery(/^confirm_delete|cancel/);
  await confirmCtx.answerCallbackQuery();
  
  if (confirmCtx.callbackQuery.data === 'cancel') {
    await ctx.reply('–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
    return;
  }
  
  // Final confirmation
  await ctx.reply('–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ: –£–î–ê–õ–ò–¢–¨');

  const confirmationCtx = await conversation.wait();
  const confirmation = confirmationCtx.message?.text || '';

  if (confirmation !== '–£–î–ê–õ–ò–¢–¨') {
    await ctx.reply('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
    return;
  }
  
  // Delete account
  await apiClient.deleteUser(ctx.session.userId!);
  
  // Clear session
  ctx.session = {};
  
  await ctx.reply(
    '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω.\n' +
    '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏.'
  );
}

