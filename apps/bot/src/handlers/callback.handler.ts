// ==================== apps/bot/src/handlers/callback.handler.ts ====================

import { Bot, InlineKeyboard } from 'grammy';
import { MyContext } from '../core/types';
import {
  handleProfile,
  handleMyOrders,
  handleOrderDetails,
  handleMyAddresses,
  handleBalance,
  handleMyStats,
  handleReferral,
  handleSettings,
  handleTransactions,
  handleUseBonus
} from '../modules/profile/profile.handler';
import { handleAdminToken, handleAdminStats } from '../modules/admin/admin.handler';
import { EMOJI } from '@cargoexpress/shared';
import { logger } from '../core/logger';
import { apiClient } from '../core/api/client';

export function handleCallbackQueries(bot: Bot<MyContext>) {
  // Navigation
  bot.callbackQuery('main_menu', async (ctx) => {
    await ctx.answerCallbackQuery();
    await handleStart(ctx);
  });
  
  bot.callbackQuery('back', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.deleteMessage();
  });
  
  // Registration
  bot.callbackQuery('start_registration', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter('registration');
  });
  
  bot.callbackQuery('about_service', async (ctx) => {
    await ctx.answerCallbackQuery();
    await showAboutService(ctx);
  });
  
  // Main actions
  bot.callbackQuery('shipping', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter('shipping');
  });
  
  bot.callbackQuery('purchase', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter('purchase');
  });
  
  bot.callbackQuery('calculator', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter('calculator');
  });
  
  bot.callbackQuery('support', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter('support');
  });
  
  // Profile
  bot.callbackQuery('profile', async (ctx) => {
    await ctx.answerCallbackQuery();
    await handleProfile(ctx);
  });
  
  bot.callbackQuery('my_orders', async (ctx) => {
    await ctx.answerCallbackQuery();
    await handleMyOrders(ctx);
  });
  
  bot.callbackQuery('my_addresses', async (ctx) => {
    await ctx.answerCallbackQuery();
    await handleMyAddresses(ctx);
  });
  
  bot.callbackQuery('my_balance', async (ctx) => {
    await ctx.answerCallbackQuery();
    await handleBalance(ctx);
  });

  bot.callbackQuery('my_stats', async (ctx) => {
    await ctx.answerCallbackQuery();
    await handleMyStats(ctx);
  });

  bot.callbackQuery('referral', async (ctx) => {
    await ctx.answerCallbackQuery();
    await handleReferral(ctx);
  });

  bot.callbackQuery('settings', async (ctx) => {
    await ctx.answerCallbackQuery();
    await handleSettings(ctx);
  });

  bot.callbackQuery('transactions', async (ctx) => {
    await ctx.answerCallbackQuery();
    await handleTransactions(ctx);
  });

  bot.callbackQuery('use_bonus', async (ctx) => {
    await ctx.answerCallbackQuery();
    await handleUseBonus(ctx);
  });

  bot.callbackQuery('add_address', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter('addAddress');
  });

  bot.callbackQuery(/^edit_address_(\d+)$/, async (ctx) => {
    await ctx.answerCallbackQuery();
    ctx.session.tempData = { addressId: parseInt(ctx.match[1]) };
    await ctx.conversation.enter('editAddress');
  });

  bot.callbackQuery('deposit', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter('deposit');
  });

  // Referral actions
  bot.callbackQuery('share_referral', async (ctx) => {
    await ctx.answerCallbackQuery();
    const user = await apiClient.getUserProfile(ctx.session.userId!);
    const botUsername = (await ctx.api.getMe()).username;
    const referralLink = `https://t.me/${botUsername}?start=${user.referralCode}`;

    await ctx.reply(
      `üì§ <b>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π:</b>\n\n` +
      `${referralLink}\n\n` +
      `–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º!`,
      {
        reply_markup: new InlineKeyboard()
          .url('üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram', `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ CargoExpress! –ü–æ–ª—É—á–∏ 500‚ÇΩ –±–æ–Ω—É—Å–æ–≤ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ üéÅ')}`)
          .row()
          .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'referral')
      }
    );
  });

  bot.callbackQuery('my_referrals', async (ctx) => {
    await ctx.answerCallbackQuery();
    try {
      const user = await apiClient.getUserProfile(ctx.session.userId!);
      // Mock referrals data
      const referrals = [
        { firstName: '–ò–≤–∞–Ω', ordersCount: 3, earnings: 450 },
        { firstName: '–ú–∞—Ä–∏—è', ordersCount: 1, earnings: 150 },
      ];

      let message = `üë• <b>–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b>\n\n`;

      if (referrals.length === 0) {
        message += `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n\n–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 5% —Å –∏—Ö –∑–∞–∫–∞–∑–æ–≤!`;
      } else {
        message += `<b>–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> ${referrals.length}\n\n`;
        referrals.forEach((ref, index) => {
          message += `${index + 1}. ${ref.firstName}\n`;
          message += `   –ó–∞–∫–∞–∑–æ–≤: ${ref.ordersCount} | –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${ref.earnings}‚ÇΩ\n\n`;
        });
      }

      await ctx.reply(message, {
        reply_markup: new InlineKeyboard().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'referral')
      });
    } catch (error) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
    }
  });

  // Settings actions
  bot.callbackQuery('edit_name', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter('editName');
  });

  bot.callbackQuery('edit_phone', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter('editPhone');
  });

  bot.callbackQuery('edit_email', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter('editEmail');
  });

  bot.callbackQuery('edit_city', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter('editCity');
  });

  bot.callbackQuery('notifications_settings', async (ctx) => {
    await ctx.answerCallbackQuery();
    const user = await apiClient.getUserProfile(ctx.session.userId!);
    const notificationsEnabled = user.settings?.notifications !== false;

    const keyboard = new InlineKeyboard()
      .text(notificationsEnabled ? 'üîï –í—ã–∫–ª—é—á–∏—Ç—å' : 'üîî –í–∫–ª—é—á–∏—Ç—å', 'toggle_notifications')
      .row()
      .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'settings');

    await ctx.reply(
      `üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n` +
      `–°—Ç–∞—Ç—É—Å: ${notificationsEnabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}\n\n` +
      `<b>–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:</b>\n` +
      `‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞\n` +
      `‚Ä¢ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –ø–æ—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥\n` +
      `‚Ä¢ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ\n` +
      `‚Ä¢ –ê–∫—Ü–∏—è—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö`,
      { reply_markup: keyboard }
    );
  });

  bot.callbackQuery('toggle_notifications', async (ctx) => {
    try {
      await ctx.answerCallbackQuery();
      const user = await apiClient.getUserProfile(ctx.session.userId!);
      const newValue = !(user.settings?.notifications !== false);

      await apiClient.updateUserSettings(ctx.session.userId!, {
        notifications: newValue
      });

      await ctx.reply(
        `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${newValue ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}`,
        { reply_markup: new InlineKeyboard().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'notifications_settings') }
      );
    } catch (error) {
      logger.error('Toggle notifications error:', error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }
  });

  bot.callbackQuery('language_settings', async (ctx) => {
    await ctx.answerCallbackQuery();
    const keyboard = new InlineKeyboard()
      .text('üá∑üá∫ –†—É—Å—Å–∫–∏–π ‚úÖ', 'lang_ru')
      .text('üá¨üáß English', 'lang_en').row()
      .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'settings');

    await ctx.reply(
      `üåê <b>–í—ã–±–æ—Ä —è–∑—ã–∫–∞</b>\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:`,
      { reply_markup: keyboard }
    );
  });

  bot.callbackQuery('currency_settings', async (ctx) => {
    await ctx.answerCallbackQuery();
    const keyboard = new InlineKeyboard()
      .text('‚ÇΩ RUB (–†—É–±–ª—å) ‚úÖ', 'currency_rub')
      .text('$ USD (–î–æ–ª–ª–∞—Ä)', 'currency_usd').row()
      .text('‚Ç¨ EUR (–ï–≤—Ä–æ)', 'currency_eur')
      .text('‚Ç∏ KZT (–¢–µ–Ω–≥–µ)', 'currency_kzt').row()
      .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'settings');

    await ctx.reply(
      `üí± <b>–í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã</b>\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω:`,
      { reply_markup: keyboard }
    );
  });

  bot.callbackQuery('delete_account', async (ctx) => {
    await ctx.answerCallbackQuery();
    const keyboard = new InlineKeyboard()
      .text('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', 'confirm_delete_account')
      .text('‚ùå –û—Ç–º–µ–Ω–∞', 'settings');

    await ctx.reply(
      `‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n` +
      `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç?\n\n` +
      `<b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</b>\n\n` +
      `–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:\n` +
      `‚Ä¢ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n` +
      `‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤\n` +
      `‚Ä¢ –ë–∞–ª–∞–Ω—Å –∏ –±–æ–Ω—É—Å—ã\n` +
      `‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞`,
      { reply_markup: keyboard }
    );
  });

  bot.callbackQuery('confirm_delete_account', async (ctx) => {
    await ctx.answerCallbackQuery();
    try {
      await apiClient.deleteUser(ctx.session.userId!);
      await ctx.reply(
        `‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω</b>\n\n` +
        `–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.\n` +
        `–ù–∞–¥–µ–µ–º—Å—è —É–≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!`
      );
      ctx.session = { messageIds: [] };
    } catch (error) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
    }
  });

  // Address actions
  bot.callbackQuery(/^delete_addr_(\d+)$/, async (ctx) => {
    await ctx.answerCallbackQuery();
    const addressId = parseInt(ctx.match[1]);
    try {
      await apiClient.deleteAddress(addressId);
      await ctx.reply('‚úÖ –ê–¥—Ä–µ—Å —É–¥–∞–ª–µ–Ω', {
        reply_markup: new InlineKeyboard().text('üìç –ú–æ–∏ –∞–¥—Ä–µ—Å–∞', 'my_addresses')
      });
    } catch (error) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å');
    }
  });

  bot.callbackQuery(/^set_default_addr_(\d+)$/, async (ctx) => {
    await ctx.answerCallbackQuery();
    const addressId = parseInt(ctx.match[1]);
    try {
      await apiClient.updateAddress(addressId, { isDefault: true });
      await ctx.reply('‚úÖ –ê–¥—Ä–µ—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π', {
        reply_markup: new InlineKeyboard().text('üìç –ú–æ–∏ –∞–¥—Ä–µ—Å–∞', 'my_addresses')
      });
    } catch (error) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å');
    }
  });

  // Order details
  bot.callbackQuery(/^order_details_(\d+)$/, async (ctx) => {
    await ctx.answerCallbackQuery();
    const orderId = parseInt(ctx.match[1]);
    await handleOrderDetails(ctx, orderId);
  });
  
  // Payment
  bot.callbackQuery(/^pay_(card|crypto|balance)_(\d+)$/, async (ctx) => {
    await ctx.answerCallbackQuery();
    const method = ctx.match[1];
    const orderId = parseInt(ctx.match[2]);
    await handlePayment(ctx, orderId, method);
  });
  
  // Admin
  bot.callbackQuery('admin_token', async (ctx) => {
    await ctx.answerCallbackQuery();
    await handleAdminToken(ctx);
  });
  
  bot.callbackQuery('admin_stats', async (ctx) => {
    await ctx.answerCallbackQuery();
    await handleAdminStats(ctx);
  });
  
  // Help sections
  bot.callbackQuery(/^help_/, async (ctx) => {
    await ctx.answerCallbackQuery();
    const section = ctx.callbackQuery.data.replace('help_', '');
    await showHelpSection(ctx, section);
  });
  
  // Default handler
  bot.on('callback_query', async (ctx) => {
    await ctx.answerCallbackQuery('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    logger.warn(`Unhandled callback query: ${ctx.callbackQuery.data}`);
  });
}

async function showAboutService(ctx: MyContext) {
  await ctx.reply(
    `${EMOJI.INFO} <b>–û —Å–µ—Ä–≤–∏—Å–µ CargoExpress</b>\n\n` +
    
    `<b>–ö—Ç–æ –º—ã?</b>\n` +
    `CargoExpress - –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å 2019 –≥–æ–¥–∞.\n` +
    `–£ –Ω–∞—Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∫–ª–∞–¥—ã –≤ 7 —Å—Ç—Ä–∞–Ω–∞—Ö –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å–µ—Ç—å –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É.\n\n` +
    
    `<b>–ù–∞—à–∏ —Å–∫–ª–∞–¥—ã:</b>\n` +
    `üá∫üá∏ –°–®–ê (–î–µ–ª–∞–≤—ç—Ä, –ù—å—é-–î–∂–µ—Ä—Å–∏)\n` +
    `üá®üá≥ –ö–∏—Ç–∞–π (–ì—É–∞–Ω—á–∂–æ—É, –ò—É)\n` +
    `üáπüá∑ –¢—É—Ä—Ü–∏—è (–°—Ç–∞–º–±—É–ª)\n` +
    `üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è (–õ–æ–Ω–¥–æ–Ω)\n` +
    `üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è (–ë–µ—Ä–ª–∏–Ω)\n` +
    `üáØüáµ –Ø–ø–æ–Ω–∏—è (–¢–æ–∫–∏–æ)\n` +
    `üá∞üá∑ –Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è (–°–µ—É–ª)\n\n` +
    
    `<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n` +
    `‚Ä¢ –ë–æ–ª–µ–µ 50,000 –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n` +
    `‚Ä¢ –ë–æ–ª–µ–µ 200,000 –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—ã–ª–æ–∫\n` +
    `‚Ä¢ 99.2% –ø–æ—Å—ã–ª–æ–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–æ–≤—Ä–µ–º—è\n` +
    `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ 4.8/5.0\n\n` +
    
    `<b>–ì–∞—Ä–∞–Ω—Ç–∏–∏:</b>\n` +
    `‚úÖ –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—ã–ª–æ–∫\n` +
    `‚úÖ –í–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–≥ –ø—Ä–∏ —É—Ç–µ—Ä–µ\n` +
    `‚úÖ –§–æ—Ç–æ –ø–æ—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ\n` +
    `‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö\n` +
    `‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7`
  );
}

async function showHelpSection(ctx: MyContext, section: string) {
  const helpTexts = {
    shipping: `${EMOJI.SHIPPING} <b>–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É</b>\n\n` +
      `1. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É" –∏–ª–∏ /shipping\n` +
      `2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n` +
      `3. –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥\n` +
      `4. –£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –∏ —Ä–∞–∑–º–µ—Ä—ã\n` +
      `5. –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ\n` +
      `6. –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑\n\n` +
      `<b>–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Å–∫–ª–∞–¥ —É–∫–∞–∂–∏—Ç–µ:</b>\n` +
      `‚Ä¢ CargoExpress\n` +
      `‚Ä¢ –í–∞—à ID –∫–ª–∏–µ–Ω—Ç–∞\n` +
      `‚Ä¢ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞`,
    
    purchase: `${EMOJI.PURCHASE} <b>–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä</b>\n\n` +
      `1. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä" –∏–ª–∏ /purchase\n` +
      `2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:\n` +
      `   ‚Ä¢ –ü–æ —Å—Å—ã–ª–∫–µ - –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä\n` +
      `   ‚Ä¢ –ò–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ - –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞\n` +
      `3. –£–∫–∞–∂–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ (—Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)\n` +
      `4. –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑\n\n` +
      `–ú—ã –∫—É–ø–∏–º —Ç–æ–≤–∞—Ä –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.`,
    
    payment: `${EMOJI.BALANCE} <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã</b>\n\n` +
      `üí≥ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</b>\n` +
      `Visa, MasterCard, –ú–ò–†\n` +
      `–ö–æ–º–∏—Å—Å–∏—è: 0%\n\n` +
      `ü™ô <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞</b>\n` +
      `BTC, ETH, USDT\n` +
      `–ö–æ–º–∏—Å—Å–∏—è: 1%\n\n` +
      `üí∞ <b>–ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n` +
      `–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∑–∞—Ä–∞–Ω–µ–µ\n` +
      `–ë–æ–Ω—É—Å: +2% –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏`,
    
    tracking: `${EMOJI.PACKAGE} <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤</b>\n\n` +
      `‚Ä¢ /orders - –≤—Å–µ –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã\n` +
      `‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–∫–∞–∑ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π\n` +
      `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n` +
      `‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞\n\n` +
      `<b>–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤:</b>\n` +
      `‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã\n` +
      `‚úÖ –û–ø–ª–∞—á–µ–Ω\n` +
      `üì¶ –ü—Ä–∏–Ω—è—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ\n` +
      `‚úàÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω\n` +
      `üöö –í –ø—É—Ç–∏\n` +
      `üì¨ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ\n` +
      `‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω`,
    
    tariffs: `${EMOJI.CALCULATOR} <b>–¢–∞—Ä–∏—Ñ—ã –∏ —Å—Ä–æ–∫–∏</b>\n\n` +
      `üá∫üá∏ <b>–°–®–ê:</b> –æ—Ç $8/–∫–≥, 10-15 –¥–Ω–µ–π\n` +
      `üá®üá≥ <b>–ö–∏—Ç–∞–π:</b> –æ—Ç $6/–∫–≥, 15-20 –¥–Ω–µ–π\n` +
      `üáπüá∑ <b>–¢—É—Ä—Ü–∏—è:</b> –æ—Ç $7/–∫–≥, 7-10 –¥–Ω–µ–π\n` +
      `üá¨üáß <b>UK:</b> –æ—Ç $9/–∫–≥, 10-14 –¥–Ω–µ–π\n` +
      `üá©üá™ <b>–ì–µ—Ä–º–∞–Ω–∏—è:</b> –æ—Ç $8/–∫–≥, 8-12 –¥–Ω–µ–π\n\n` +
      `<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n` +
      `üì¶ –ü–µ—Ä–µ—É–ø–∞–∫–æ–≤–∫–∞: $3\n` +
      `üì∏ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞: $2\n` +
      `üîí –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ: 2% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏`,
    
    faq: `${EMOJI.INFO} <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n` +
      `<b>‚ùì –ö–∞–∫ —É–∑–Ω–∞—Ç—å –º–æ–π ID?</b>\n` +
      `–í–∞—à ID –ø–æ–∫–∞–∑–∞–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ (/profile)\n\n` +
      `<b>‚ùì –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?</b>\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /calculator –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞\n\n` +
      `<b>‚ùì –ö–∞–∫ –¥–æ–ª–≥–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –ø–æ—Å—ã–ª–∫–∞?</b>\n` +
      `–ë–µ—Å–ø–ª–∞—Ç–Ω–æ 30 –¥–Ω–µ–π, –¥–∞–ª–µ–µ $1/–¥–µ–Ω—å\n\n` +
      `<b>‚ùì –ú–æ–∂–Ω–æ –ª–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø–æ—Å—ã–ª–∫–∏?</b>\n` +
      `–î–∞, —É—Å–ª—É–≥–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ - $5\n\n` +
      `<b>‚ùì –ï—Å—Ç—å –ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?</b>\n` +
      `–ú–∞–∫—Å. –≤–µ—Å: 30 –∫–≥, –º–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: 120 —Å–º`
  };
  
  await ctx.reply(helpTexts[section] || '–†–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

