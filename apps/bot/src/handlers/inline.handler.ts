// ==================== apps/bot/src/handlers/inline.handler.ts ====================

import { Bot, InlineQueryResultArticle } from 'grammy';
import { MyContext } from '../core/types';
import { apiClient } from '../core/api/client';
import { EMOJI, FormatUtils } from '@cargoexpress/shared';
import { logger } from '../core/logger';

export function handleInlineQueries(bot: Bot<MyContext>) {
  bot.on('inline_query', async (ctx) => {
    const query = ctx.inlineQuery.query.trim();
    
    if (!query) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
      const results: InlineQueryResultArticle[] = [
        {
          type: 'article',
          id: 'help',
          title: '‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è',
          description: '–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞',
          input_message_content: {
            message_text: '–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ @bot_username –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞'
          }
        },
        {
          type: 'article',
          id: 'calculator',
          title: 'üìä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏',
          description: '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏',
          input_message_content: {
            message_text: '/calculator - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏'
          }
        },
        {
          type: 'article',
          id: 'support',
          title: 'üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
          description: '–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
          input_message_content: {
            message_text: '/support - –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ CargoExpress'
          }
        }
      ];
      
      await ctx.answerInlineQuery(results, {
        cache_time: 300,
        is_personal: true
      });
      return;
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä—É
    if (/^[A-Z0-9]{8,20}$/i.test(query)) {
      try {
        const order = await apiClient.getOrderByTrackNumber(query.toUpperCase());
        
        if (order) {
          const results: InlineQueryResultArticle[] = [{
            type: 'article',
            id: `order_${order.id}`,
            title: `üì¶ –ó–∞–∫–∞–∑ ${order.trackNumber}`,
            description: `–°—Ç–∞—Ç—É—Å: ${ORDER_STATUS_LABELS[order.status]}`,
            input_message_content: {
              message_text: 
                `${EMOJI.PACKAGE} <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</b>\n\n` +
                `–¢—Ä–µ–∫: <code>${order.trackNumber}</code>\n` +
                `–°—Ç–∞—Ç—É—Å: ${ORDER_STATUS_LABELS[order.status]}\n` +
                `–¢–∏–ø: ${order.type === 'SHIPPING' ? '‚úàÔ∏è –î–æ—Å—Ç–∞–≤–∫–∞' : 'üõç –í—ã–∫—É–ø'}\n` +
                `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${FormatUtils.formatDate(order.updatedAt)}\n\n` +
                `–î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @${ctx.me.username}`,
              parse_mode: 'HTML'
            }
          }];
          
          await ctx.answerInlineQuery(results, {
            cache_time: 60,
            is_personal: true
          });
        } else {
          await ctx.answerInlineQuery([], {
            cache_time: 0,
            is_personal: true,
            switch_pm_text: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω',
            switch_pm_parameter: 'start'
          });
        }
      } catch (error) {
        logger.error('Inline query error:', error);
        await ctx.answerInlineQuery([], {
          cache_time: 0,
          is_personal: true
        });
      }
    } else {
      // –ü–æ–∏—Å–∫ –ø–æ –¥—Ä—É–≥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
      const results: InlineQueryResultArticle[] = [
        {
          type: 'article',
          id: 'search',
          title: 'üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤',
          description: `–ü–æ–∏—Å–∫: ${query}`,
          input_message_content: {
            message_text: `–ü–æ–∏—Å–∫ "${query}" - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ @${ctx.me.username}`
          }
        }
      ];
      
      await ctx.answerInlineQuery(results, {
        cache_time: 0,
        is_personal: true,
        switch_pm_text: '–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞',
        switch_pm_parameter: 'start'
      });
    }
  });
  
  bot.on('chosen_inline_result', async (ctx) => {
    logger.info(`Inline result chosen: ${ctx.chosenInlineResult.result_id}`);
  });
}

