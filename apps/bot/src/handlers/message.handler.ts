// ==================== apps/bot/src/handlers/message.handler.ts ====================

import { Bot } from 'grammy';
import { MyContext } from '../core/types';
import { apiClient } from '../core/api/client';
import { EMOJI } from '@cargoexpress/shared';
import { logger } from '../core/logger';

export function handleMessages(bot: Bot<MyContext>) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–≤
  bot.hears(/^[A-Z0-9]{8,20}$/i, async (ctx) => {
    const trackNumber = ctx.message.text.toUpperCase();
    
    try {
      const order = await apiClient.getOrderByTrackNumber(trackNumber);
      
      if (order) {
        await ctx.reply(
          `${EMOJI.PACKAGE} <b>–ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω!</b>\n\n` +
          `–¢—Ä–µ–∫: <code>${trackNumber}</code>\n` +
          `–°—Ç–∞—Ç—É—Å: ${ORDER_STATUS_LABELS[order.status]}\n` +
          `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${FormatUtils.formatDate(order.updatedAt)}\n\n` +
          `–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –Ω–∞–∂–º–∏—Ç–µ /orders`
        );
      } else {
        await ctx.reply(
          `${EMOJI.ERROR} –ó–∞–∫–∞–∑ —Å —Ç—Ä–µ–∫–æ–º ${trackNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n` +
          `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞.`
        );
      }
    } catch (error) {
      logger.error('Track search error:', error);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
  bot.hears(/^\+?[0-9\s\-\(\)]+$/, async (ctx) => {
    if (ctx.message.text.length >= 10 && ctx.message.text.length <= 20) {
      if (ctx.session.scene === 'registration') return; // Skip if in registration
      
      await ctx.reply(
        `${EMOJI.INFO} –ü–æ—Ö–æ–∂–µ, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n` +
        `–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings`
      );
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ email
  bot.hears(/^[^\s@]+@[^\s@]+\.[^\s@]+$/, async (ctx) => {
    if (ctx.session.scene === 'registration') return;
    
    await ctx.reply(
      `${EMOJI.INFO} –ü–æ—Ö–æ–∂–µ, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ email.\n` +
      `–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å email –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings`
    );
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä—ã
  bot.hears(/^https?:\/\/.+/, async (ctx) => {
    const url = ctx.message.text;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã
    const stores = {
      'amazon': 'üõí Amazon',
      'ebay': 'üõç eBay',
      'aliexpress': 'üè™ AliExpress',
      'taobao': 'üá®üá≥ Taobao',
      'wildberries': 'üá∑üá∫ Wildberries',
      'ozon': 'üá∑üá∫ OZON'
    };
    
    let storeName = null;
    for (const [key, name] of Object.entries(stores)) {
      if (url.toLowerCase().includes(key)) {
        storeName = name;
        break;
      }
    }
    
    if (storeName) {
      await ctx.reply(
        `${EMOJI.PURCHASE} <b>–¢–æ–≤–∞—Ä –∏–∑ ${storeName}</b>\n\n` +
        `–•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /purchase –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–ü–æ —Å—Å—ã–ª–∫–µ"`,
        {
          reply_markup: new InlineKeyboard()
            .text('üõç –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä', 'purchase')
            .text('üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', 'calculator')
        }
      );
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
  bot.on('message:photo', async (ctx) => {
    if (ctx.session.scene === 'support') return; // Support handles its own photos
    
    await ctx.reply(
      `${EMOJI.INFO} –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ.\n` +
      `–ï—Å–ª–∏ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –∑–∞–∫–∞–∑–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ /support`
    );
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  bot.on('message:document', async (ctx) => {
    if (ctx.session.scene === 'support') return;
    
    const doc = ctx.message.document;
    const fileSize = doc.file_size || 0;
    
    if (fileSize > 20 * 1024 * 1024) { // 20MB
      await ctx.reply(`${EMOJI.ERROR} –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 20MB)`);
      return;
    }
    
    await ctx.reply(
      `${EMOJI.INFO} –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω: ${doc.file_name}\n` +
      `–ï—Å–ª–∏ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –∑–∞–∫–∞–∑–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ /support`
    );
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('message:voice', async (ctx) => {
    await ctx.reply(
      `${EMOJI.INFO} –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.\n` +
      `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n` +
      `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ /support`
    );
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
  bot.on('message:sticker', async (ctx) => {
    const stickers = ['üëç', '‚ù§Ô∏è', 'üòä', 'üéâ', 'üôè'];
    const randomSticker = stickers[Math.floor(Math.random() * stickers.length)];
    await ctx.reply(randomSticker);
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏
  bot.on('message:location', async (ctx) => {
    const { latitude, longitude } = ctx.message.location;
    
    await ctx.reply(
      `${EMOJI.LOCATION} –õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞.\n` +
      `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${latitude.toFixed(4)}, ${longitude.toFixed(4)}\n\n` +
      `–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings`
    );
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  bot.on('message:contact', async (ctx) => {
    if (ctx.session.scene === 'registration') return;
    
    const contact = ctx.message.contact;
    await ctx.reply(
      `${EMOJI.PROFILE} –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω: ${contact.first_name}\n` +
      `–¢–µ–ª–µ—Ñ–æ–Ω: ${contact.phone_number}`
    );
  });
  
  // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  bot.on('message:text').filter(
    ctx => ctx.message?.text?.startsWith('/'),
    async (ctx) => {
      await ctx.reply(
        `${EMOJI.ERROR} –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`
      );
    }
  );
  
  // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  bot.on('message:text', async (ctx) => {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–∫–æ–º-—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å–µ, –Ω–µ –º–µ—à–∞–µ–º
    if (ctx.session.scene) return;
    
    const text = ctx.message.text.toLowerCase();
    
    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    const keywords = {
      '—Ü–µ–Ω–∞\|—Å—Ç–æ–∏–º–æ—Å—Ç—å\|—Å–∫–æ–ª—å–∫–æ\|—Ç–∞—Ä–∏—Ñ': 'calculator',
      '–¥–æ—Å—Ç–∞–≤–∫–∞\|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å\|–ø–æ—Å—ã–ª–∫–∞': 'shipping',
      '–∫—É–ø–∏—Ç—å\|–∑–∞–∫–∞–∑–∞—Ç—å\|—Ç–æ–≤–∞—Ä': 'purchase',
      '–ø–æ–º–æ—â—å\|–ø–æ–¥–¥–µ—Ä–∂–∫–∞\|–ø—Ä–æ–±–ª–µ–º–∞': 'support',
      '–ø—Ä–æ—Ñ–∏–ª—å\|–±–∞–ª–∞–Ω—Å\|–¥–∞–Ω–Ω—ã–µ': 'profile',
      '–∑–∞–∫–∞–∑\|—Ç—Ä–µ–∫\|–æ—Ç—Å–ª–µ–¥–∏—Ç—å': 'orders'
    };
    
    for (const [pattern, command] of Object.entries(keywords)) {
      const regex = new RegExp(pattern);
      if (regex.test(text)) {
        await ctx.reply(
          `${EMOJI.INFO} –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –Ω—É–∂–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /${command}\n` +
          `–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`
        );
        return;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
    await ctx.reply(
      `–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n` +
      `/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n` +
      `/help - –ü–æ–º–æ—â—å\n` +
      `/support - –ü–æ–¥–¥–µ—Ä–∂–∫–∞`
    );
  });
}

