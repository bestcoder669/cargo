// ==================== apps/bot/src/handlers/payment.handler.ts ====================

import { MyContext } from '../core/types';
import { apiClient } from '../core/api/client';
import { InlineKeyboard } from 'grammy';
import { EMOJI, FormatUtils, PaymentStatus } from '@cargoexpress/shared';
import { logger } from '../core/logger';

export async function handlePayment(ctx: MyContext, orderId: number, method: string) {
  try {
    await ctx.answerCallbackQuery('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...');
    
    const order = await apiClient.getOrder(orderId);
    
    if (!order) {
      await ctx.reply(`${EMOJI.ERROR} –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }
    
    if (order.status !== 'PENDING') {
      await ctx.reply(`${EMOJI.ERROR} –ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω`);
      return;
    }
    
    const amount = order.totalAmount || 0;
    
    switch (method) {
      case 'card':
        await handleCardPayment(ctx, order, amount);
        break;
        
      case 'crypto':
        await handleCryptoPayment(ctx, order, amount);
        break;
        
      case 'balance':
        await handleBalancePayment(ctx, order, amount);
        break;
        
      default:
        await ctx.reply(`${EMOJI.ERROR} –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã`);
    }
    
  } catch (error) {
    logger.error('Payment handler error:', error);
    await ctx.reply(
      `${EMOJI.ERROR} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n` +
      `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`
    );
  }
}

async function handleCardPayment(ctx: MyContext, order: any, amount: number) {
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    const payment = await apiClient.createPayment(order.id, 'card');
    
    // Telegram Payments API
    await ctx.replyWithInvoice(
      `–ó–∞–∫–∞–∑ #${order.id}`, // title
      `–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ ${order.type === 'SHIPPING' ? '–¥–æ—Å—Ç–∞–≤–∫—É' : '–≤—ã–∫—É–ø'}`, // description
      JSON.stringify({ orderId: order.id, paymentId: payment.id }), // payload
      'RUB', // currency
      [{ label: '–ö –æ–ø–ª–∞—Ç–µ', amount: amount * 100 }], // prices (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)
      {
        provider_token: process.env.PAYMENT_PROVIDER_TOKEN!,
        start_parameter: `order_${order.id}`,
        photo_url: 'https://cargoexpress.com/invoice.jpg',
        need_name: true,
        need_phone_number: true,
        need_email: true,
        send_phone_number_to_provider: true,
        send_email_to_provider: true
      }
    );
    
  } catch (error) {
    logger.error('Card payment error:', error);
    
    // Fallback - –≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
    await ctx.reply(
      `${EMOJI.BALANCE} <b>–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π</b>\n\n` +
      `–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${FormatUtils.formatMoney(amount)}\n\n` +
      `–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n` +
      `https://pay.cargoexpress.com/order/${order.id}\n\n` +
      `–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`,
      {
        reply_markup: new InlineKeyboard()
          .url('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', `https://pay.cargoexpress.com/order/${order.id}`)
          .row()
          .text('üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å', `check_payment_${order.id}`)
      }
    );
  }
}

async function handleCryptoPayment(ctx: MyContext, order: any, amount: number) {
  const payment = await apiClient.createPayment(order.id, 'crypto');
  
  // –†–∞—Å—á–µ—Ç –≤ –∫—Ä–∏–ø—Ç–µ
  const btcRate = 3500000; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å BTC/RUB
  const usdtRate = 90; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å USDT/RUB
  
  const btcAmount = (amount / btcRate).toFixed(8);
  const usdtAmount = (amount / usdtRate).toFixed(2);
  
  await ctx.reply(
    `${EMOJI.BALANCE} <b>–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π</b>\n\n` +
    `–ó–∞–∫–∞–∑: #${order.id}\n` +
    `–°—É–º–º–∞: ${FormatUtils.formatMoney(amount)}\n\n` +
    
    `<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã:</b>\n\n` +
    
    `<b>Bitcoin (BTC):</b>\n` +
    `–°—É–º–º–∞: <code>${btcAmount}</code> BTC\n` +
    `–ê–¥—Ä–µ—Å: <code>${payment.cryptoAddress?.btc || '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa'}</code>\n\n` +
    
    `<b>USDT (TRC20):</b>\n` +
    `–°—É–º–º–∞: <code>${usdtAmount}</code> USDT\n` +
    `–ê–¥—Ä–µ—Å: <code>${payment.cryptoAddress?.usdt || 'TXxxx...'}</code>\n\n` +
    
    `${EMOJI.WARNING} <b>–í–∞–∂–Ω–æ:</b>\n` +
    `‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É\n` +
    `‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n` +
    `‚Ä¢ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n` +
    `‚Ä¢ –í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: 10-60 –º–∏–Ω—É—Ç`,
    {
      reply_markup: new InlineKeyboard()
        .text('‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª', `confirm_crypto_${order.id}`)
        .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_payment')
    }
  );
}

async function handleBalancePayment(ctx: MyContext, order: any, amount: number) {
  const user = await apiClient.getUserProfile(ctx.session.userId!);
  
  if (user.balance < amount) {
    await ctx.reply(
      `${EMOJI.ERROR} <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n` +
      `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${FormatUtils.formatMoney(amount)}\n` +
      `–í–∞—à –±–∞–ª–∞–Ω—Å: ${FormatUtils.formatMoney(user.balance)}\n` +
      `–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: ${FormatUtils.formatMoney(amount - user.balance)}\n\n` +
      `–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.`,
      {
        reply_markup: new InlineKeyboard()
          .text('üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'deposit')
          .row()
          .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `order_details_${order.id}`)
      }
    );
    return;
  }
  
  await ctx.reply(
    `${EMOJI.BALANCE} <b>–û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞</b>\n\n` +
    `–ó–∞–∫–∞–∑: #${order.id}\n` +
    `–°—É–º–º–∞: ${FormatUtils.formatMoney(amount)}\n` +
    `–í–∞—à –±–∞–ª–∞–Ω—Å: ${FormatUtils.formatMoney(user.balance)}\n` +
    `–û—Å—Ç–∞–Ω–µ—Ç—Å—è: ${FormatUtils.formatMoney(user.balance - amount)}\n\n` +
    `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É?`,
    {
      reply_markup: new InlineKeyboard()
        .text('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `confirm_balance_payment_${order.id}`)
        .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_payment')
    }
  );
}

// Pre-checkout handler –¥–ª—è Telegram Payments
export function handlePreCheckout(bot: Bot<MyContext>) {
  bot.on('pre_checkout_query', async (ctx) => {
    try {
      const payload = JSON.parse(ctx.preCheckoutQuery.invoice_payload);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑
      const order = await apiClient.getOrder(payload.orderId);
      
      if (!order || order.status !== 'PENDING') {
        await ctx.answerPreCheckoutQuery(false, {
          error_message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω'
        });
        return;
      }
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
      await ctx.answerPreCheckoutQuery(true);
      
    } catch (error) {
      logger.error('Pre-checkout error:', error);
      await ctx.answerPreCheckoutQuery(false, {
        error_message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞'
      });
    }
  });
  
  // Successful payment handler
  bot.on('message:successful_payment', async (ctx) => {
    try {
      const payment = ctx.message.successful_payment;
      const payload = JSON.parse(payment.invoice_payload);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      await apiClient.updateOrder(payload.orderId, {
        status: 'PAID',
        paymentId: payment.telegram_payment_charge_id
      });
      
      await ctx.reply(
        `${EMOJI.SUCCESS} <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n` +
        `–ó–∞–∫–∞–∑ #${payload.orderId} –æ–ø–ª–∞—á–µ–Ω.\n` +
        `–°—É–º–º–∞: ${FormatUtils.formatMoney(payment.total_amount / 100)}\n\n` +
        `–ú—ã –Ω–∞—á–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.`,
        {
          reply_markup: new InlineKeyboard()
            .text('üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'my_orders')
        }
      );
      
    } catch (error) {
      logger.error('Successful payment handler error:', error);
    }
  });
}