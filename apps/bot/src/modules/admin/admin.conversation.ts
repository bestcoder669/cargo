// ==================== apps/bot/src/modules/admin/admin.conversation.ts ====================

import { MyContext, MyConversation } from '../../core/types';
import { apiClient } from '../../core/api/client';
import { InlineKeyboard } from 'grammy';
import { EMOJI, OrderStatus } from '@cargoexpress/shared';
import { logger } from '../../core/logger';
import { isAdmin } from './admin.handlers';

// ==================== –°–ö–ê–ù–ï–† –í –ë–û–¢–ï ====================

export async function adminScannerConversation(
  conversation: MyConversation,
  ctx: MyContext
) {
  try {
    if (!isAdmin(ctx.from!.id)) {
      await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –í—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
    const statusKeyboard = new InlineKeyboard();
    Object.values(OrderStatus).forEach(status => {
      statusKeyboard.text(
        ORDER_STATUS_LABELS[status],
        `scanner_status_${status}`
      ).row();
    });
    
    await ctx.reply(
      `${EMOJI.PACKAGE} <b>–°–∫–∞–Ω–µ—Ä –∑–∞–∫–∞–∑–æ–≤</b>\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:`,
      { reply_markup: statusKeyboard }
    );
    
    const statusCtx = await conversation.waitForCallbackQuery(/^scanner_status_/);
    const targetStatus = statusCtx.callbackQuery.data.replace('scanner_status_', '') as OrderStatus;
    await statusCtx.answerCallbackQuery();
    
    // –°—Ç–∞—Ä—Ç —Å–µ—Å—Å–∏–∏
    const session = await apiClient.startScannerSession({
      adminId: ctx.from!.id,
      targetStatus,
      confirmationMode: false,
      soundEnabled: false
    });
    
    await ctx.reply(
      `‚úÖ –°–µ—Å—Å–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—á–∞—Ç–∞!\n\n` +
      `–¶–µ–ª–µ–≤–æ–π —Å—Ç–∞—Ç—É—Å: ${ORDER_STATUS_LABELS[targetStatus]}\n\n` +
      `–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞ –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º.\n` +
      `–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /stop`,
      { reply_markup: { remove_keyboard: true } }
    );
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–∫–æ–≤
    let scannedCount = 0;
    let errorCount = 0;
    
    while (true) {
      const message = await conversation.wait();
      
      if (message.message?.text === '/stop') {
        break;
      }
      
      if (!message.message?.text) {
        await ctx.reply('‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º');
        continue;
      }
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤)
      const tracks = message.message.text
        .split('\n')
        .map(t => t.trim())
        .filter(t => t.length > 0);
      
      for (const trackNumber of tracks) {
        const result = await apiClient.scanOrder({
          sessionId: session.id,
          trackNumber,
          timestamp: new Date()
        });
        
        if (result.success) {
          scannedCount++;
          await ctx.reply(
            `‚úÖ ${trackNumber}\n` +
            `–ó–∞–∫–∞–∑ #${result.orderId} ‚Üí ${ORDER_STATUS_LABELS[targetStatus]}`
          );
        } else {
          errorCount++;
          await ctx.reply(
            `‚ùå ${trackNumber}\n` +
            `–û—à–∏–±–∫–∞: ${result.error}`
          );
        }
      }
    }
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    await apiClient.endScannerSession(session.id);
    
    await ctx.reply(
      `${EMOJI.SUCCESS} <b>–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n` +
      `‚úÖ –£—Å–ø–µ—à–Ω–æ: ${scannedCount}\n` +
      `‚ùå –û—à–∏–±–æ–∫: ${errorCount}\n` +
      `‚è± –í—Å–µ–≥–æ: ${scannedCount + errorCount}`,
      { reply_markup: mainAdminKeyboard }
    );
    
  } catch (error) {
    logger.error('Scanner conversation error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞');
  }
}

// ==================== –†–ê–°–°–´–õ–ö–ê ====================

export async function adminBroadcastConversation(
  conversation: MyConversation,
  ctx: MyContext
) {
  try {
    if (!isAdmin(ctx.from!.id)) {
      await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }
    
    // –í—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    const audienceKeyboard = new InlineKeyboard()
      .text('üë• –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'broadcast_all').row()
      .text('üÜï –ù–æ–≤—ã–º (7 –¥–Ω–µ–π)', 'broadcast_new').row()
      .text('üí∞ –° –±–∞–ª–∞–Ω—Å–æ–º', 'broadcast_balance').row()
      .text('üì¶ –° –∑–∞–∫–∞–∑–∞–º–∏', 'broadcast_orders').row()
      .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel');
    
    await ctx.reply(
      `${EMOJI.SUPPORT} <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é:`,
      { reply_markup: audienceKeyboard }
    );
    
    const audienceCtx = await conversation.waitForCallbackQuery(/^broadcast_|cancel/);
    await audienceCtx.answerCallbackQuery();
    
    if (audienceCtx.callbackQuery.data === 'cancel') {
      await ctx.reply('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
      return;
    }
    
    const audience = audienceCtx.callbackQuery.data.replace('broadcast_', '');
    
    // –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
    await ctx.reply(
      `üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n` +
      `–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n` +
      `<b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <code>–∫–æ–¥</code>`
    );
    
    const messageCtx = await conversation.wait();
    const broadcastText = messageCtx.message?.text;
    
    if (!broadcastText) {
      await ctx.reply('‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const confirmKeyboard = new InlineKeyboard()
      .text('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', 'confirm_send')
      .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_send');
    
    const users = await apiClient.getUsersCount({ audience });
    
    await ctx.reply(
      `<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:</b>\n\n` +
      `<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> ${getAudienceName(audience)}\n` +
      `<b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> ${users.count}\n\n` +
      `<b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n${broadcastText}\n\n` +
      `–û—Ç–ø—Ä–∞–≤–∏—Ç—å?`,
      { reply_markup: confirmKeyboard }
    );
    
    const confirmCtx = await conversation.waitForCallbackQuery(/^confirm_send|cancel_send/);
    await confirmCtx.answerCallbackQuery();
    
    if (confirmCtx.callbackQuery.data === 'cancel_send') {
      await ctx.reply('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
      return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞
    await ctx.reply(`${EMOJI.LOADING} –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...`);
    
    const result = await apiClient.sendBroadcast({
      audience,
      message: broadcastText,
      adminId: ctx.from!.id
    });
    
    await ctx.reply(
      `${EMOJI.SUCCESS} <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n` +
      `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${result.sent}\n` +
      `‚ùå –û—à–∏–±–æ–∫: ${result.failed}\n` +
      `‚è± –í—Ä–µ–º—è: ${result.duration} —Å–µ–∫`
    );
    
  } catch (error) {
    logger.error('Broadcast conversation error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏');
  }
}

// ==================== –ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ====================

export async function adminUserSearchConversation(
  conversation: MyConversation,
  ctx: MyContext
) {
  try {
    if (!isAdmin(ctx.from!.id)) return;
    
    await ctx.reply(
      `üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n` +
      `–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n` +
      `‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123)\n` +
      `‚Ä¢ Telegram ID\n` +
      `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω\n` +
      `‚Ä¢ Email\n` +
      `‚Ä¢ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞`
    );
    
    const searchCtx = await conversation.wait();
    const query = searchCtx.message?.text;
    
    if (!query) return;
    
    const results = await apiClient.searchUsers({ query });
    
    if (results.length === 0) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    const keyboard = new InlineKeyboard();
    
    results.forEach(user => {
      keyboard.text(
        `#${user.id} - ${user.firstName} ${user.lastName || ''}`,
        `admin_user_${user.id}`
      ).row();
    });
    
    keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin_users');
    
    await ctx.reply(
      `–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${results.length}`,
      { reply_markup: keyboard }
    );
    
  } catch (error) {
    logger.error('User search error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞');
  }
}

// ==================== –ò–ó–ú–ï–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê ====================

export async function adminUserBalanceConversation(
  conversation: MyConversation,
  ctx: MyContext,
  userId: number
) {
  try {
    if (!isAdmin(ctx.from!.id)) return;
    
    const operationKeyboard = new InlineKeyboard()
      .text('‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å', 'balance_add')
      .text('‚ûñ –°–ø–∏—Å–∞—Ç—å', 'balance_subtract').row()
      .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel');
    
    await ctx.reply(
      `üí∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #${userId}</b>\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:`,
      { reply_markup: operationKeyboard }
    );
    
    const opCtx = await conversation.waitForCallbackQuery(/^balance_|cancel/);
    await opCtx.answerCallbackQuery();
    
    if (opCtx.callbackQuery.data === 'cancel') return;
    
    const operation = opCtx.callbackQuery.data.replace('balance_', '');
    
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:');
    
    const amountCtx = await conversation.wait();
    const amount = parseFloat(amountCtx.message?.text || '0');
    
    if (isNaN(amount) || amount <= 0) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞');
      return;
    }
    
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:');
    
    const reasonCtx = await conversation.wait();
    const reason = reasonCtx.message?.text || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è';
    
    const result = await apiClient.updateUserBalance({
      userId,
      amount: operation === 'add' ? amount : -amount,
      reason,
      adminId: ctx.from!.id
    });
    
    await ctx.reply(
      `‚úÖ <b>–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n` +
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: #${userId}\n` +
      `–û–ø–µ—Ä–∞—Ü–∏—è: ${operation === 'add' ? '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' : '–°–ø–∏—Å–∞–Ω–∏–µ'}\n` +
      `–°—É–º–º–∞: ${FormatUtils.formatMoney(amount)}\n` +
      `–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${FormatUtils.formatMoney(result.newBalance)}\n` +
      `–ü—Ä–∏—á–∏–Ω–∞: ${reason}`
    );
    
  } catch (error) {
    logger.error('Balance change error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
  }
}

function getAudienceName(audience: string): string {
  const names = {
    all: '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
    new: '–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (7 –¥–Ω–µ–π)',
    balance: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º',
    orders: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏'
  };
  return names[audience] || audience;
}