// ==================== apps/bot/src/modules/admin/admin.handlers.ts ====================

import { MyContext } from '../../core/types';
import { apiClient } from '../../core/api/client';
import { config } from '../../core/config';
import { InlineKeyboard, Keyboard } from 'grammy';
import { 
  EMOJI, 
  AdminRole, 
  getPermissionsByRole,
  FormatUtils,
  ORDER_STATUS_LABELS,
  OrderStatus
} from '@cargoexpress/shared';
import { logger } from '../../core/logger';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
export function isAdmin(userId: number): boolean {
  return config.ADMIN_IDS.includes(userId) || config.SUPER_ADMIN_IDS.includes(userId);
}

export function isSuperAdmin(userId: number): boolean {
  return config.SUPER_ADMIN_IDS.includes(userId);
}

// ==================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ê–î–ú–ò–ù–ö–ò ====================

export async function handleAdminCommand(ctx: MyContext) {
  try {
    const userId = ctx.from?.id;
    
    if (!userId || !isAdmin(userId)) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.');
      return;
    }
    
    const keyboard = new InlineKeyboard();
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    keyboard
      .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')
      .text('üì¶ –ó–∞–∫–∞–∑—ã', 'admin_orders').row()
      .text('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'admin_users')
      .text('üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'admin_support').row()
      .text('üì° –°–∫–∞–Ω–µ—Ä', 'admin_scanner')
      .text('üí∞ –§–∏–Ω–∞–Ω—Å—ã', 'admin_finance').row()
      .text('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin_broadcast')
      .text('üîê –í–µ–±-–ø–∞–Ω–µ–ª—å', 'admin_token').row();
    
    if (isSuperAdmin(userId)) {
      keyboard
        .text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'admin_settings')
        .text('üîß –°–∏—Å—Ç–µ–º–∞', 'admin_system').row();
    }
    
    await ctx.reply(
      `${EMOJI.SETTINGS} <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n` +
      `üë§ –ê–¥–º–∏–Ω: ${ctx.from.first_name}\n` +
      `üîê –†–æ–ª—å: ${isSuperAdmin(userId) ? '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω' : '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}\n` +
      `üìÖ –í—Ä–µ–º—è: ${FormatUtils.formatDate(new Date())}\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:`,
      { reply_markup: keyboard }
    );
    
  } catch (error) {
    logger.error('Admin command error:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
  }
}

// ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ====================

export async function handleAdminStats(ctx: MyContext) {
  try {
    if (!isAdmin(ctx.from?.id!)) return;
    
    await ctx.answerCallbackQuery('–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
    
    const stats = await apiClient.getAdminStats();
    
    const keyboard = new InlineKeyboard()
      .text('üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats_detailed').row()
      .text('üìä –ì—Ä–∞—Ñ–∏–∫–∏', 'admin_stats_charts').row()
      .text('üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel', 'admin_stats_export').row()
      .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin');
    
    await ctx.editMessageText(
      `${EMOJI.CALCULATOR} <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n` +
      
      `<b>üìÖ –°–µ–≥–æ–¥–Ω—è:</b>\n` +
      `‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${stats.today.orders}\n` +
      `‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.today.users}\n` +
      `‚Ä¢ –í—ã—Ä—É—á–∫–∞: ${FormatUtils.formatMoney(stats.today.revenue)}\n\n` +
      
      `<b>üìä –ó–∞ –Ω–µ–¥–µ–ª—é:</b>\n` +
      `‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: ${stats.week.orders}\n` +
      `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${FormatUtils.formatMoney(stats.week.avgOrder)}\n` +
      `‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${stats.week.conversion}%\n\n` +
      
      `<b>üìà –ó–∞ –º–µ—Å—è—Ü:</b>\n` +
      `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${stats.month.orders}\n` +
      `‚Ä¢ –í—ã—Ä—É—á–∫–∞: ${FormatUtils.formatMoney(stats.month.revenue)}\n` +
      `‚Ä¢ –ü—Ä–∏–±—ã–ª—å: ${FormatUtils.formatMoney(stats.month.profit)}\n\n` +
      
      `<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n` +
      `‚Ä¢ –í—Å–µ–≥–æ: ${stats.users.total}\n` +
      `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π): ${stats.users.active}\n` +
      `‚Ä¢ –° –∑–∞–∫–∞–∑–∞–º–∏: ${stats.users.withOrders}\n\n` +
      
      `<b>üì¶ –ó–∞–∫–∞–∑—ã:</b>\n` +
      `‚Ä¢ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${stats.orders.processing}\n` +
      `‚Ä¢ –í –ø—É—Ç–∏: ${stats.orders.inTransit}\n` +
      `‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${stats.orders.delivered}\n`,
      { reply_markup: keyboard }
    );
    
  } catch (error) {
    logger.error('Admin stats error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
}

// ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê–ú–ò ====================

export async function handleAdminOrders(ctx: MyContext) {
  try {
    if (!isAdmin(ctx.from?.id!)) return;
    
    await ctx.answerCallbackQuery();
    
    const orders = await apiClient.getOrders({
      limit: 10,
      sortBy: 'createdAt',
      sortOrder: 'desc'
    });
    
    const keyboard = new InlineKeyboard();
    
    // –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    keyboard
      .text('‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ', 'admin_orders_pending')
      .text('üì¶ –ù–∞ —Å–∫–ª–∞–¥–µ', 'admin_orders_warehouse').row()
      .text('‚úàÔ∏è –í –ø—É—Ç–∏', 'admin_orders_transit')
      .text('‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ', 'admin_orders_problem').row();
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
    orders.data.slice(0, 5).forEach(order => {
      keyboard.text(
        `#${order.id} - ${order.user.firstName} - ${ORDER_STATUS_LABELS[order.status]}`,
        `admin_order_${order.id}`
      ).row();
    });
    
    keyboard
      .text('üîç –ü–æ–∏—Å–∫ –ø–æ —Ç—Ä–µ–∫—É', 'admin_order_search').row()
      .text('üìã –í—Å–µ –∑–∞–∫–∞–∑—ã', 'admin_orders_all').row()
      .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin');
    
    await ctx.editMessageText(
      `${EMOJI.PACKAGE} <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>\n\n` +
      `–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.meta.total}\n` +
      `–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤:`,
      { reply_markup: keyboard }
    );
    
  } catch (error) {
    logger.error('Admin orders error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞');
  }
}

export async function handleOrderDetails(ctx: MyContext) {
  try {
    if (!isAdmin(ctx.from?.id!)) return;
    
    const orderId = parseInt(ctx.match![1]);
    await ctx.answerCallbackQuery();
    
    const order = await apiClient.getOrder(orderId);
    
    const keyboard = new InlineKeyboard()
      .text('üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', `admin_order_status_${orderId}`)
      .text('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', `admin_message_user_${order.userId}`).row()
      .text('üì∏ –§–æ—Ç–æ', `admin_order_photos_${orderId}`)
      .text('üìú –ò—Å—Ç–æ—Ä–∏—è', `admin_order_history_${orderId}`).row()
      .text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', `admin_order_cancel_${orderId}`).row()
      .text('‚¨ÖÔ∏è –ö –∑–∞–∫–∞–∑–∞–º', 'admin_orders')
      .text('‚¨ÖÔ∏è –ú–µ–Ω—é', 'admin');
    
    await ctx.editMessageText(
      `${EMOJI.PACKAGE} <b>–ó–∞–∫–∞–∑ #${order.id}</b>\n\n` +
      
      `<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n` +
      `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${ORDER_STATUS_LABELS[order.status]}\n` +
      `‚Ä¢ –¢–∏–ø: ${order.type === 'SHIPPING' ? '‚úàÔ∏è –î–æ—Å—Ç–∞–≤–∫–∞' : 'üõç –í—ã–∫—É–ø'}\n` +
      `‚Ä¢ –¢—Ä–µ–∫: <code>${order.trackNumber}</code>\n` +
      `‚Ä¢ –°–æ–∑–¥–∞–Ω: ${FormatUtils.formatDate(order.createdAt)}\n\n` +
      
      `<b>–ö–ª–∏–µ–Ω—Ç:</b>\n` +
      `‚Ä¢ ID: #${order.user.id}\n` +
      `‚Ä¢ –ò–º—è: ${order.user.firstName} ${order.user.lastName || ''}\n` +
      `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${order.user.phone}\n` +
      `‚Ä¢ Email: ${order.user.email}\n\n` +
      
      `<b>–î–µ—Ç–∞–ª–∏:</b>\n` +
      `‚Ä¢ –í–µ—Å: ${order.weight ? FormatUtils.formatWeight(order.weight) : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${FormatUtils.formatMoney(order.totalAmount || 0)}\n` +
      `‚Ä¢ –û–ø–ª–∞—á–µ–Ω: ${order.paidAt ? FormatUtils.formatDate(order.paidAt) : '‚ùå –ù–µ—Ç'}\n\n` +
      
      `<b>–î–µ–π—Å—Ç–≤–∏—è:</b>`,
      { reply_markup: keyboard }
    );
    
  } catch (error) {
    logger.error('Order details error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞');
  }
}

export async function handleOrderStatusChange(ctx: MyContext) {
  try {
    if (!isAdmin(ctx.from?.id!)) return;
    
    const orderId = parseInt(ctx.match![1]);
    await ctx.answerCallbackQuery();
    
    const keyboard = new InlineKeyboard();
    
    // –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    Object.values(OrderStatus).forEach(status => {
      keyboard.text(
        ORDER_STATUS_LABELS[status],
        `admin_set_status_${orderId}_${status}`
      ).row();
    });
    
    keyboard.text('‚ùå –û—Ç–º–µ–Ω–∞', `admin_order_${orderId}`);
    
    await ctx.editMessageText(
      `${EMOJI.PACKAGE} <b>–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId}</b>\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:`,
      { reply_markup: keyboard }
    );
    
  } catch (error) {
    logger.error('Order status change error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞');
  }
}

// ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ====================

export async function handleAdminUsers(ctx: MyContext) {
  try {
    if (!isAdmin(ctx.from?.id!)) return;
    
    await ctx.answerCallbackQuery();
    
    const users = await apiClient.getUsers({
      limit: 10,
      sortBy: 'createdAt',
      sortOrder: 'desc'
    });
    
    const keyboard = new InlineKeyboard();
    
    // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard
      .text('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'admin_user_search')
      .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'admin_users_stats').row()
      .text('üéÅ –¢–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤', 'admin_users_top')
      .text('‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ', 'admin_users_banned').row();
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    users.data.slice(0, 5).forEach(user => {
      keyboard.text(
        `#${user.id} - ${user.firstName} - ${FormatUtils.formatMoney(user.totalSpent || 0)}`,
        `admin_user_${user.id}`
      ).row();
    });
    
    keyboard
      .text('üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'admin_users_all').row()
      .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin');
    
    await ctx.editMessageText(
      `${EMOJI.PROFILE} <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n` +
      `–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.meta.total}\n` +
      `–ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${users.meta.todayNew}\n\n` +
      `–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`,
      { reply_markup: keyboard }
    );
    
  } catch (error) {
    logger.error('Admin users error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞');
  }
}

export async function handleUserDetails(ctx: MyContext) {
  try {
    if (!isAdmin(ctx.from?.id!)) return;
    
    const userId = parseInt(ctx.match![1]);
    await ctx.answerCallbackQuery();
    
    const user = await apiClient.getUserProfile(userId);
    
    const keyboard = new InlineKeyboard()
      .text('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å', `admin_message_user_${userId}`)
      .text('üì¶ –ó–∞–∫–∞–∑—ã', `admin_user_orders_${userId}`).row()
      .text('üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', `admin_user_balance_${userId}`)
      .text('üéÅ –ù–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å', `admin_user_bonus_${userId}`).row()
      .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', `admin_user_stats_${userId}`)
      .text('üìú –ò—Å—Ç–æ—Ä–∏—è', `admin_user_history_${userId}`).row();
    
    if (user.isBanned) {
      keyboard.text('‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', `admin_user_unban_${userId}`).row();
    } else {
      keyboard.text('‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', `admin_user_ban_${userId}`).row();
    }
    
    keyboard
      .text('‚¨ÖÔ∏è –ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'admin_users')
      .text('‚¨ÖÔ∏è –ú–µ–Ω—é', 'admin');
    
    await ctx.editMessageText(
      `${EMOJI.PROFILE} <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${user.id}</b>\n\n` +
      
      `<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n` +
      `‚Ä¢ –ò–º—è: ${user.firstName} ${user.lastName || ''}\n` +
      `‚Ä¢ Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}\n` +
      `‚Ä¢ Email: ${user.email}\n` +
      `‚Ä¢ –ì–æ—Ä–æ–¥: ${user.city?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `‚Ä¢ Telegram ID: <code>${user.telegramId}</code>\n\n` +
      
      `<b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n` +
      `‚Ä¢ –ë–∞–ª–∞–Ω—Å: ${FormatUtils.formatMoney(user.balance)}\n` +
      `‚Ä¢ –ë–æ–Ω—É—Å—ã: ${FormatUtils.formatMoney(user.bonusBalance)}\n` +
      `‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${FormatUtils.formatMoney(user.totalSpent || 0)}\n\n` +
      
      `<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n` +
      `‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: ${user.ordersCount}\n` +
      `‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.referrals?.length || 0}\n` +
      `‚Ä¢ –†–µ—Ñ. –∫–æ–¥: <code>${user.referralCode}</code>\n` +
      `‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${FormatUtils.formatDate(user.createdAt)}\n` +
      `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${user.isBanned ? '‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}\n\n` +
      
      `<b>–î–µ–π—Å—Ç–≤–∏—è:</b>`,
      { reply_markup: keyboard }
    );
    
  } catch (error) {
    logger.error('User details error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞');
  }
}

// ==================== –°–ö–ê–ù–ï–† ====================

export async function handleAdminScanner(ctx: MyContext) {
  try {
    if (!isAdmin(ctx.from?.id!)) return;
    
    await ctx.answerCallbackQuery();
    
    const sessions = await apiClient.getScannerSessions({
      adminId: ctx.from.id,
      limit: 5
    });
    
    const keyboard = new InlineKeyboard()
      .text('üöÄ –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', 'admin_scanner_start').row()
      .text('üìã –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', 'admin_scanner_bulk').row()
      .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', 'admin_scanner_stats').row();
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    if (sessions.data.length > 0) {
      keyboard.text('üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', 'noop').row();
      sessions.data.slice(0, 3).forEach(session => {
        keyboard.text(
          `${FormatUtils.formatDate(session.startedAt)} - ${session.totalScanned} —à—Ç`,
          `admin_scanner_session_${session.id}`
        ).row();
      });
    }
    
    keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin');
    
    await ctx.editMessageText(
      `${EMOJI.PACKAGE} <b>–°–∫–∞–Ω–µ—Ä –ø–æ—Å—ã–ª–æ–∫</b>\n\n` +
      
      `–°–∫–∞–Ω–µ—Ä –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤.\n\n` +
      
      `<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n` +
      `1. –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"\n` +
      `2. –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —Å—Ç–∞—Ç—É—Å\n` +
      `3. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞\n` +
      `4. –°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω\n\n` +
      
      `<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n` +
      `‚Ä¢ –°–µ—Å—Å–∏–π —Å–µ–≥–æ–¥–Ω—è: ${sessions.meta?.todayCount || 0}\n` +
      `‚Ä¢ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${sessions.meta?.todayScanned || 0}`,
      { reply_markup: keyboard }
    );
    
  } catch (error) {
    logger.error('Admin scanner error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞');
  }
}

// ==================== –ü–û–î–î–ï–†–ñ–ö–ê ====================

export async function handleAdminSupport(ctx: MyContext) {
  try {
    if (!isAdmin(ctx.from?.id!)) return;
    
    await ctx.answerCallbackQuery();
    
    const chats = await apiClient.getSupportChats({
      status: 'WAITING',
      limit: 10
    });
    
    const keyboard = new InlineKeyboard();
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    keyboard
      .text(`‚è≥ –û–∂–∏–¥–∞—é—Ç: ${chats.meta.waiting}`, 'admin_support_waiting')
      .text(`üí¨ –í —Ä–∞–±–æ—Ç–µ: ${chats.meta.inProgress}`, 'admin_support_progress').row()
      .text(`‚úÖ –†–µ—à–µ–Ω—ã: ${chats.meta.resolved}`, 'admin_support_resolved').row();
    
    // –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
    if (chats.data.length > 0) {
      keyboard.text('üí¨ –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã:', 'noop').row();
      chats.data.slice(0, 5).forEach(chat => {
        const emoji = chat.priority === 2 ? 'üî¥' : chat.priority === 1 ? 'üü°' : '‚ö™';
        keyboard.text(
          `${emoji} #${chat.id} - ${chat.user.firstName} - ${chat.messages.length} —Å–æ–æ–±—â.`,
          `admin_support_chat_${chat.id}`
        ).row();
      });
    }
    
    keyboard
      .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', 'admin_support_stats').row()
      .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin');
    
    await ctx.editMessageText(
      `${EMOJI.SUPPORT} <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</b>\n\n` +
      
      `<b>–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:</b>\n` +
      `‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: ${chats.meta.waiting}\n` +
      `‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: ${chats.meta.inProgress}\n` +
      `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${chats.meta.avgResponseTime} –º–∏–Ω\n` +
      `‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: ${chats.meta.rating}/5.0\n\n` +
      
      `–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞:`,
      { reply_markup: keyboard }
    );
    
  } catch (error) {
    logger.error('Admin support error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞');
  }
}

// ==================== –†–ê–°–°–´–õ–ö–ê ====================

export async function handleAdminBroadcast(ctx: MyContext) {
  try {
    if (!isAdmin(ctx.from?.id!)) return;
    
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter('adminBroadcast');
    
  } catch (error) {
    logger.error('Admin broadcast error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞');
  }
}

// ==================== –§–ò–ù–ê–ù–°–´ ====================

export async function handleAdminFinance(ctx: MyContext) {
  try {
    if (!isAdmin(ctx.from?.id!)) return;
    
    await ctx.answerCallbackQuery();
    
    const finance = await apiClient.getFinanceStats();
    
    const keyboard = new InlineKeyboard()
      .text('üí≥ –ü–ª–∞—Ç–µ–∂–∏', 'admin_finance_payments')
      .text('üí∞ –ë–∞–ª–∞–Ω—Å—ã', 'admin_finance_balances').row()
      .text('üìä –û—Ç—á–µ—Ç—ã', 'admin_finance_reports')
      .text('üí∏ –í—ã–≤–æ–¥—ã', 'admin_finance_withdrawals').row()
      .text('üßæ –°—á–µ—Ç–∞', 'admin_finance_invoices')
      .text('üíπ –ì—Ä–∞—Ñ–∏–∫', 'admin_finance_chart').row()
      .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin');
    
    await ctx.editMessageText(
      `${EMOJI.BALANCE} <b>–§–∏–Ω–∞–Ω—Å—ã</b>\n\n` +
      
      `<b>üìÖ –°–µ–≥–æ–¥–Ω—è:</b>\n` +
      `‚Ä¢ –î–æ—Ö–æ–¥: ${FormatUtils.formatMoney(finance.today.revenue)}\n` +
      `‚Ä¢ –†–∞—Å—Ö–æ–¥: ${FormatUtils.formatMoney(finance.today.expenses)}\n` +
      `‚Ä¢ –ü—Ä–∏–±—ã–ª—å: ${FormatUtils.formatMoney(finance.today.profit)}\n` +
      `‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${finance.today.transactions}\n\n` +
      
      `<b>üìä –ó–∞ –º–µ—Å—è—Ü:</b>\n` +
      `‚Ä¢ –î–æ—Ö–æ–¥: ${FormatUtils.formatMoney(finance.month.revenue)}\n` +
      `‚Ä¢ –†–∞—Å—Ö–æ–¥: ${FormatUtils.formatMoney(finance.month.expenses)}\n` +
      `‚Ä¢ –ü—Ä–∏–±—ã–ª—å: ${FormatUtils.formatMoney(finance.month.profit)}\n` +
      `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${FormatUtils.formatMoney(finance.month.avgOrder)}\n\n` +
      
      `<b>üí∞ –ë–∞–ª–∞–Ω—Å—ã:</b>\n` +
      `‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${FormatUtils.formatMoney(finance.balances.users)}\n` +
      `‚Ä¢ –ë–æ–Ω—É—Å–æ–≤: ${FormatUtils.formatMoney(finance.balances.bonuses)}\n` +
      `‚Ä¢ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${FormatUtils.formatMoney(finance.balances.pending)}\n\n` +
      
      `<b>üí≥ –ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã:</b>\n` +
      `‚Ä¢ –ö–∞—Ä—Ç—ã: ${FormatUtils.formatMoney(finance.methods.card)} (${finance.methods.cardPercent}%)\n` +
      `‚Ä¢ –ö—Ä–∏–ø—Ç–∞: ${FormatUtils.formatMoney(finance.methods.crypto)} (${finance.methods.cryptoPercent}%)\n` +
      `‚Ä¢ –°–ë–ü: ${FormatUtils.formatMoney(finance.methods.sbp)} (${finance.methods.sbpPercent}%)`,
      { reply_markup: keyboard }
    );
    
  } catch (error) {
    logger.error('Admin finance error:', error);
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞');
  }
}

