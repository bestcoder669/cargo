// ==================== apps/bot/src/modules/admin/admin.module.ts (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø) ====================

import { Bot, InlineKeyboard } from 'grammy';
import { MyContext } from '../../core/types';
import { createConversation } from '@grammyjs/conversations';
import { apiClient } from '../../core/api/client';
import { ORDER_STATUS_LABELS } from '@cargoexpress/shared';
import {
  adminScannerConversation,
  adminBroadcastConversation,
  adminUserSearchConversation,
  adminUserBalanceConversation,
  adminUserBanConversation,
  adminUserBonusConversation,
  adminMessageUserConversation,
  adminOrderSearchConversation,
  adminSupportReplyConversation,
  adminScannerBulkConversation
} from './admin.conversation';
import { isSuperAdmin } from './admin.handler';
import { 
  handleAdminCommand,
  handleAdminToken,
  handleAdminStats,
  handleAdminOrders,
  handleOrderDetails,
  handleOrderStatusChange,
  handleOrderCancel,
  handleConfirmCancelOrder,
  handleAdminUsers,
  handleUserDetails,
  handleUserBan,
  handleUserUnban,
  handleUserBalance,
  handleUserBonus,
  handleUserOrders,
  handleMessageUser,
  handleAdminBroadcast,
  handleAdminScanner,
  handleAdminSupport,
  handleSupportChat,
  handleSupportClose,
  handleAdminFinance,
  handleAdminSettings
} from './admin.handler';

export function registerAdminModule(bot: Bot<MyContext>) {
  // Admin conversations
  bot.use(createConversation(adminScannerConversation, 'adminScanner'));
  bot.use(createConversation(adminBroadcastConversation, 'adminBroadcast'));
  bot.use(createConversation(adminUserSearchConversation, 'adminUserSearch'));
  bot.use(createConversation(adminUserBalanceConversation, 'adminUserBalance'));
  bot.use(createConversation(adminUserBanConversation, 'adminUserBan'));
  bot.use(createConversation(adminUserBonusConversation, 'adminUserBonus'));
  bot.use(createConversation(adminMessageUserConversation, 'adminMessageUser'));
  bot.use(createConversation(adminOrderSearchConversation, 'adminOrderSearch'));
  bot.use(createConversation(adminSupportReplyConversation, 'adminSupportReply'));
  bot.use(createConversation(adminScannerBulkConversation, 'adminScannerBulk'));
  
  // Admin command
  bot.command('admin', handleAdminCommand);
  
  // Main admin menu
  bot.callbackQuery('admin', handleAdminCommand);
  bot.callbackQuery('admin_token', handleAdminToken);
  bot.callbackQuery('admin_stats', handleAdminStats);
  bot.callbackQuery('admin_orders', handleAdminOrders);
  bot.callbackQuery('admin_users', handleAdminUsers);
  bot.callbackQuery('admin_broadcast', handleAdminBroadcast);
  bot.callbackQuery('admin_scanner', handleAdminScanner);
  bot.callbackQuery('admin_support', handleAdminSupport);
  bot.callbackQuery('admin_finance', handleAdminFinance);
  bot.callbackQuery('admin_settings', handleAdminSettings);
  
  // Order management
  bot.callbackQuery(/^admin_order_(\d+)$/, handleOrderDetails);
  bot.callbackQuery(/^admin_order_status_(\d+)$/, handleOrderStatusChange);
  bot.callbackQuery(/^admin_order_cancel_(\d+)$/, handleOrderCancel);
  bot.callbackQuery(/^confirm_cancel_order_(\d+)$/, handleConfirmCancelOrder);
  bot.callbackQuery(/^admin_set_status_(\d+)_(.+)$/, async (ctx) => {
    const orderId = parseInt(ctx.match![1]);
    const status = ctx.match![2];
    await ctx.answerCallbackQuery({ text: '–û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç—É—Å...' });

    await apiClient.updateOrder(orderId, { status }, ctx.from!.id);
    await ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${orderId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${ORDER_STATUS_LABELS[status as keyof typeof ORDER_STATUS_LABELS]}`);
  });
  
  // User management
  bot.callbackQuery(/^admin_user_(\d+)$/, handleUserDetails);
  bot.callbackQuery(/^admin_user_ban_(\d+)$/, handleUserBan);
  bot.callbackQuery(/^admin_user_unban_(\d+)$/, handleUserUnban);
  bot.callbackQuery(/^admin_user_balance_(\d+)$/, handleUserBalance);
  bot.callbackQuery(/^admin_user_bonus_(\d+)$/, handleUserBonus);
  bot.callbackQuery(/^admin_user_orders_(\d+)$/, handleUserOrders);
  bot.callbackQuery(/^admin_message_user_(\d+)$/, handleMessageUser);
  bot.callbackQuery('admin_user_search', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter('adminUserSearch');
  });
  bot.callbackQuery(/^admin_user_stats_(\d+)$/, async (ctx) => {
    try {
      const userId = parseInt(ctx.match![1]);
      await ctx.answerCallbackQuery();

      const stats = await apiClient.getUserStats(userId);
      await ctx.reply(
        `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #${userId}</b>\n\n` +
        `<b>–ó–∞–∫–∞–∑—ã:</b>\n` +
        `‚Ä¢ –í—Å–µ–≥–æ: ${stats.orders?.total || 0}\n` +
        `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.orders?.active || 0}\n` +
        `‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${stats.orders?.completed || 0}\n` +
        `‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö: ${stats.orders?.cancelled || 0}\n\n` +
        `<b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n` +
        `‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${stats.finance?.totalSpent || 0} ‚ÇΩ\n` +
        `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${stats.finance?.avgOrder || 0} ‚ÇΩ\n` +
        `‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π: ${stats.finance?.deposits || 0} ‚ÇΩ\n\n` +
        `<b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n` +
        `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: ${stats.activity?.lastSeen || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}\n` +
        `‚Ä¢ –î–Ω–µ–π —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${stats.activity?.daysRegistered || 0}\n` +
        `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: ${stats.activity?.referrals || 0}`
      );
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  });
  bot.callbackQuery(/^admin_user_history_(\d+)$/, async (ctx) => {
    try {
      const userId = parseInt(ctx.match![1]);
      await ctx.answerCallbackQuery();

      const history = await apiClient.getUserHistory(userId, { limit: 10 });
      let msg = `üìú <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #${userId}</b>\n\n`;

      if (!history || history.length === 0) {
        msg += `–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø—É—Å—Ç–∞.`;
      } else {
        for (const event of history) {
          msg += `‚Ä¢ ${event.date}: ${event.action}\n`;
        }
      }

      await ctx.reply(msg);
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  });
  bot.callbackQuery(/^admin_order_photos_(\d+)$/, async (ctx) => {
    try {
      const orderId = parseInt(ctx.match![1]);
      await ctx.answerCallbackQuery();

      const photos = await apiClient.getOrderPhotos(orderId);
      if (!photos || photos.length === 0) {
        await ctx.reply('üì∏ –£ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
        return;
      }

      await ctx.reply(`üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–∫–∞–∑–∞ #${orderId}: ${photos.length}`);
      for (const photo of photos.slice(0, 5)) {
        await ctx.replyWithPhoto(photo.url, { caption: photo.description || '' });
      }
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
    }
  });
  bot.callbackQuery(/^admin_order_history_(\d+)$/, async (ctx) => {
    try {
      const orderId = parseInt(ctx.match![1]);
      await ctx.answerCallbackQuery();

      const history = await apiClient.getOrderHistory(orderId);
      let msg = `üìú <b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–∞ #${orderId}</b>\n\n`;

      if (!history || history.length === 0) {
        msg += `–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—É—Å—Ç–∞.`;
      } else {
        for (const event of history) {
          msg += `‚Ä¢ ${event.date}: ${event.fromStatus} ‚Üí ${event.toStatus}\n`;
          if (event.comment) msg += `  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${event.comment}\n`;
        }
      }

      await ctx.reply(msg);
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–∞');
    }
  });
  
  // Support management
  bot.callbackQuery(/^admin_support_chat_(\d+)$/, handleSupportChat);
  bot.callbackQuery(/^admin_support_close_(\d+)$/, handleSupportClose);
  bot.callbackQuery(/^admin_support_reply_(\d+)$/, async (ctx) => {
    const chatId = parseInt(ctx.match![1]);
    await ctx.answerCallbackQuery();
    ctx.session.tempData = { chatId };
    await ctx.conversation.enter('adminSupportReply');
  });
  bot.callbackQuery(/^admin_support_priority_(\d+)_(.+)$/, async (ctx) => {
    const chatId = parseInt(ctx.match![1]);
    const priority = ctx.match![2];
    await ctx.answerCallbackQuery({ text: '–û–±–Ω–æ–≤–ª—è—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç...' });

    await apiClient.updateSupportChat(chatId, { priority });
    await ctx.reply(`‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —á–∞—Ç–∞ #${chatId} –∏–∑–º–µ–Ω–µ–Ω`);
  });
  
  // Scanner
  bot.callbackQuery('admin_scanner_start', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter('adminScanner');
  });
  bot.callbackQuery('admin_scanner_bulk', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter('adminScannerBulk');
  });
  
  // Broadcast
  bot.callbackQuery('admin_broadcast', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter('adminBroadcast');
  });

  // Stats sub-menu handlers
  bot.callbackQuery('admin_stats_detailed', async (ctx) => {
    try {
      await ctx.answerCallbackQuery();
      const stats = await apiClient.getAdminStats();
      await ctx.reply(
        `üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n` +
        `<b>–ó–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n` +
        `‚Ä¢ –ù–æ–≤—ã–µ: ${stats.orders?.new || 0}\n` +
        `‚Ä¢ –û–ø–ª–∞—á–µ–Ω—ã: ${stats.orders?.paid || 0}\n` +
        `‚Ä¢ –ù–∞ —Å–∫–ª–∞–¥–µ: ${stats.orders?.warehouse || 0}\n` +
        `‚Ä¢ –í –ø—É—Ç–∏: ${stats.orders?.inTransit || 0}\n` +
        `‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${stats.orders?.delivered || 0}\n` +
        `‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–æ: ${stats.orders?.cancelled || 0}\n\n` +
        `<b>–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</b>\n` +
        `‚Ä¢ –ù–æ–≤—ã–µ ‚Üí –û–ø–ª–∞—á–µ–Ω–æ: ${stats.conversion?.newToPaid || 0}%\n` +
        `‚Ä¢ –û–ø–ª–∞—á–µ–Ω–æ ‚Üí –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${stats.conversion?.paidToDelivered || 0}%\n\n` +
        `<b>–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:</b>\n` +
        `‚Ä¢ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${stats.avg?.deliveryTime || 0} –¥–Ω–µ–π\n` +
        `‚Ä¢ –ß–µ–∫: ${stats.avg?.orderValue || 0} ‚ÇΩ`
      );
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  });

  bot.callbackQuery('admin_stats_charts', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.reply(
      `üìà <b>–ì—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b>\n\n` +
      `–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n` +
      `–ù–∞–∂–º–∏—Ç–µ "–í–µ–±-–ø–∞–Ω–µ–ª—å" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏.`
    );
  });

  bot.callbackQuery('admin_stats_export', async (ctx) => {
    await ctx.answerCallbackQuery({ text: '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...' });
    try {
      const exportData = await apiClient.exportStats();
      await ctx.reply(
        `üì• <b>–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n` +
        `–§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é:\n` +
        `<code>${exportData.url}</code>\n\n` +
        `–§–æ—Ä–º–∞—Ç: Excel (.xlsx)\n` +
        `–†–∞–∑–º–µ—Ä: ${exportData.size} KB`
      );
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø–∞–Ω–µ–ª—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤.');
    }
  });

  // Finance sub-menu handlers
  bot.callbackQuery('admin_finance_payments', async (ctx) => {
    try {
      await ctx.answerCallbackQuery();
      const payments = await apiClient.getRecentPayments({ limit: 10 });
      let msg = `üí≥ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏</b>\n\n`;

      if (payments.data && payments.data.length > 0) {
        for (const payment of payments.data) {
          msg += `#${payment.id} - ${payment.amount} ${payment.currency}\n`;
          msg += `  ${payment.method} | ${payment.status}\n`;
          msg += `  ${payment.createdAt}\n\n`;
        }
      } else {
        msg += `–ü–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.`;
      }

      await ctx.reply(msg);
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π');
    }
  });

  bot.callbackQuery('admin_finance_balances', async (ctx) => {
    try {
      await ctx.answerCallbackQuery();
      const balances = await apiClient.getBalancesSummary();
      await ctx.reply(
        `üí∞ <b>–°–≤–æ–¥–∫–∞ –ø–æ –±–∞–ª–∞–Ω—Å–∞–º</b>\n\n` +
        `<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –±–∞–ª–∞–Ω—Å—ã:</b>\n` +
        `‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ${balances.users?.total || 0} ‚ÇΩ\n` +
        `‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–ª–∞–Ω—Å–æ–º: ${balances.users?.count || 0}\n\n` +
        `<b>–ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:</b>\n` +
        `‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ${balances.bonuses?.total || 0} ‚ÇΩ\n` +
        `‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–æ–Ω—É—Å–∞–º–∏: ${balances.bonuses?.count || 0}\n\n` +
        `<b>–í –æ–∂–∏–¥–∞–Ω–∏–∏:</b>\n` +
        `‚Ä¢ –ü–ª–∞—Ç–µ–∂–∏: ${balances.pending?.payments || 0} ‚ÇΩ\n` +
        `‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç—ã: ${balances.pending?.refunds || 0} ‚ÇΩ`
      );
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤');
    }
  });

  bot.callbackQuery('admin_finance_reports', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.reply(
      `üìä <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã</b>\n\n` +
      `–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n` +
      `–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:\n` +
      `‚Ä¢ –û—Ç—á–µ—Ç –ø–æ –≤—ã—Ä—É—á–∫–µ\n` +
      `‚Ä¢ –û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º\n` +
      `‚Ä¢ –ù–∞–ª–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç\n` +
      `‚Ä¢ –û—Ç—á–µ—Ç –ø–æ –ø–ª–∞—Ç–µ–∂–Ω—ã–º –º–µ—Ç–æ–¥–∞–º\n` +
      `‚Ä¢ –°–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤`
    );
  });

  bot.callbackQuery('admin_finance_withdrawals', async (ctx) => {
    try {
      await ctx.answerCallbackQuery();
      const withdrawals = await apiClient.getWithdrawals({ limit: 10 });
      let msg = `üí∏ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–≤–æ–¥—ã</b>\n\n`;

      if (!withdrawals.data || withdrawals.data.length === 0) {
        msg += `–í—ã–≤–æ–¥—ã —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.`;
      } else {
        for (const w of withdrawals.data) {
          msg += `#${w.id} - ${w.amount} ${w.currency}\n`;
          msg += `  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: #${w.userId}\n`;
          msg += `  –°—Ç–∞—Ç—É—Å: ${w.status}\n\n`;
        }
      }

      await ctx.reply(msg);
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–≤–æ–¥–æ–≤');
    }
  });

  bot.callbackQuery('admin_finance_invoices', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.reply(`–°—á–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–µ–±-–ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`);
  });

  bot.callbackQuery('admin_finance_chart', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.reply(`–ì—Ä–∞—Ñ–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–µ–±-–ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`);
  });

  // Orders filters
  bot.callbackQuery('admin_orders_pending', async (ctx) => {
    try {
      await ctx.answerCallbackQuery();
      const orders = await apiClient.getOrders({ status: 'NEW', limit: 10 });
      await ctx.reply(`‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤: ${orders.meta?.total || 0}`);
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
    }
  });

  bot.callbackQuery('admin_orders_warehouse', async (ctx) => {
    try {
      await ctx.answerCallbackQuery();
      const orders = await apiClient.getOrders({ status: 'WAREHOUSE', limit: 10 });
      await ctx.reply(`üì¶ –ó–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ: ${orders.meta?.total || 0}`);
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
    }
  });

  bot.callbackQuery('admin_orders_transit', async (ctx) => {
    try {
      await ctx.answerCallbackQuery();
      const orders = await apiClient.getOrders({ status: 'IN_TRANSIT', limit: 10 });
      await ctx.reply(`‚úàÔ∏è –ó–∞–∫–∞–∑–æ–≤ –≤ –ø—É—Ç–∏: ${orders.meta?.total || 0}`);
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
    }
  });

  bot.callbackQuery('admin_orders_problem', async (ctx) => {
    try {
      await ctx.answerCallbackQuery();
      const orders = await apiClient.getOrders({ status: 'PROBLEM', limit: 10 });
      await ctx.reply(`‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${orders.meta?.total || 0}`);
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
    }
  });

  bot.callbackQuery('admin_orders_all', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.reply(`–í—Å–µ –∑–∞–∫–∞–∑—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–µ–±-–ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`);
  });

  bot.callbackQuery('admin_order_search', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.conversation.enter('adminOrderSearch');
  });

  // Users filters
  bot.callbackQuery('admin_users_stats', async (ctx) => {
    try {
      await ctx.answerCallbackQuery();
      const stats = await apiClient.getUsersStats();
      await ctx.reply(
        `üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n` +
        `‚Ä¢ –í—Å–µ–≥–æ: ${stats?.total || 0}\n` +
        `‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ 24—á: ${stats?.today || 0}\n` +
        `‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: ${stats?.week || 0}\n` +
        `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats?.active || 0}\n` +
        `‚Ä¢ –° –∑–∞–∫–∞–∑–∞–º–∏: ${stats?.withOrders || 0}\n` +
        `‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: ${stats?.banned || 0}`
      );
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  });

  bot.callbackQuery('admin_users_top', async (ctx) => {
    try {
      await ctx.answerCallbackQuery();
      const topUsers = await apiClient.getTopUsers({ limit: 10 });

      const keyboard = new InlineKeyboard();

      if (!topUsers || topUsers.length === 0) {
        await ctx.reply('üéÅ <b>–¢–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö.');
        return;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç–∞
      for (const user of topUsers) {
        keyboard.text(
          `${user.rank}. ${user.firstName} - ${user.totalSpent} ‚ÇΩ (${user.ordersCount} –∑–∞–∫.)`,
          `admin_user_${user.id}`
        ).row();
      }

      keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin_users');

      await ctx.reply(
        `üéÅ <b>–¢–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`,
        { reply_markup: keyboard }
      );
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤');
    }
  });

  bot.callbackQuery('admin_users_banned', async (ctx) => {
    try {
      await ctx.answerCallbackQuery();
      const users = await apiClient.getUsers({ isBanned: true, limit: 10 });

      const keyboard = new InlineKeyboard();

      if (!users.data || users.data.length === 0) {
        await ctx.reply('‚õî <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n–ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
        return;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
      for (const user of users.data) {
        keyboard.text(
          `#${user.id} - ${user.firstName} (${user.banReason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'})`,
          `admin_user_${user.id}`
        ).row();
      }

      keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin_users');

      await ctx.reply(
        `‚õî <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`,
        { reply_markup: keyboard }
      );
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  });

  bot.callbackQuery('admin_users_all', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.reply(`–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–µ–±-–ø–∞–Ω–µ–ª–∏.`);
  });

  // Scanner stats
  bot.callbackQuery('admin_scanner_stats', async (ctx) => {
    try {
      await ctx.answerCallbackQuery();
      const stats = await apiClient.getScannerStats();
      await ctx.reply(
        `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n` +
        `<b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n` +
        `‚Ä¢ –°–µ—Å—Å–∏–π: ${stats.today?.sessions || 0}\n` +
        `‚Ä¢ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${stats.today?.scanned || 0}\n` +
        `‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${stats.today?.success || 0}\n` +
        `‚Ä¢ –û—à–∏–±–æ–∫: ${stats.today?.errors || 0}\n\n` +
        `<b>–ó–∞ –Ω–µ–¥–µ–ª—é:</b>\n` +
        `‚Ä¢ –°–µ—Å—Å–∏–π: ${stats.week?.sessions || 0}\n` +
        `‚Ä¢ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${stats.week?.scanned || 0}\n\n` +
        `<b>–í—Å–µ–≥–æ:</b>\n` +
        `‚Ä¢ –°–µ—Å—Å–∏–π: ${stats.total?.sessions || 0}\n` +
        `‚Ä¢ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${stats.total?.scanned || 0}`
      );
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
  });

  bot.callbackQuery(/^admin_scanner_session_(\d+)$/, async (ctx) => {
    try {
      const sessionId = parseInt(ctx.match![1]);
      await ctx.answerCallbackQuery();

      const session = await apiClient.getScannerSession(sessionId);
      await ctx.reply(
        `üìã <b>–°–µ—Å—Å–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #${session.id}</b>\n\n` +
        `‚Ä¢ –ù–∞—á–∞–ª–æ: ${session.startedAt}\n` +
        `‚Ä¢ –ö–æ–Ω–µ—Ü: ${session.endedAt || '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}\n` +
        `‚Ä¢ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${session.totalScanned || 0}\n` +
        `‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${session.successCount || 0}\n` +
        `‚Ä¢ –û—à–∏–±–æ–∫: ${session.errorCount || 0}\n` +
        `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${session.targetStatus}`
      );
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏');
    }
  });

  // Support filters
  bot.callbackQuery('admin_support_waiting', async (ctx) => {
    try {
      await ctx.answerCallbackQuery();
      const chats = await apiClient.getSupportChats({ status: 'WAITING', limit: 10 });
      await ctx.reply(`‚è≥ –ß–∞—Ç–æ–≤ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏: ${chats.meta?.waiting || 0}`);
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤');
    }
  });

  bot.callbackQuery('admin_support_progress', async (ctx) => {
    try {
      await ctx.answerCallbackQuery();
      const chats = await apiClient.getSupportChats({ status: 'IN_PROGRESS', limit: 10 });
      await ctx.reply(`üí¨ –ß–∞—Ç–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ: ${chats.meta?.inProgress || 0}`);
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤');
    }
  });

  bot.callbackQuery('admin_support_resolved', async (ctx) => {
    try {
      await ctx.answerCallbackQuery();
      const chats = await apiClient.getSupportChats({ status: 'RESOLVED', limit: 10 });
      await ctx.reply(`‚úÖ –†–µ—à–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: ${chats.meta?.resolved || 0}`);
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤');
    }
  });

  bot.callbackQuery('admin_support_stats', async (ctx) => {
    try {
      await ctx.answerCallbackQuery();
      const stats = await apiClient.getSupportStats();
      await ctx.reply(
        `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n` +
        `<b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n` +
        `‚Ä¢ –ù–æ–≤—ã—Ö —á–∞—Ç–æ–≤: ${stats.today?.new || 0}\n` +
        `‚Ä¢ –†–µ—à–µ–Ω–æ: ${stats.today?.resolved || 0}\n` +
        `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${stats.today?.avgTime || 0} –º–∏–Ω\n\n` +
        `<b>–í—Å–µ–≥–æ:</b>\n` +
        `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.total?.active || 0}\n` +
        `‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏: ${stats.total?.waiting || 0}\n` +
        `‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: ${stats.total?.rating || 0}/5.0`
      );
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏');
    }
  });

  // System handlers
  bot.callbackQuery('admin_system', async (ctx) => {
    try {
      await ctx.answerCallbackQuery();
      const system = await apiClient.getSystemInfo();
      await ctx.reply(
        `üîß <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</b>\n\n` +
        `<b>–í–µ—Ä—Å–∏—è:</b> ${system.version || 'N/A'}\n` +
        `<b>–°—Ç–∞—Ç—É—Å:</b> ${system.status || 'N/A'}\n` +
        `<b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> ${system.database?.status || 'N/A'}\n` +
        `<b>Redis:</b> ${system.redis?.status || 'N/A'}\n` +
        `<b>WebSocket:</b> ${system.websocket?.status || 'N/A'}\n\n` +
        `<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n` +
        `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${system.stats?.activeSessions || 0}\n` +
        `‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω: ${system.stats?.requestsPerMin || 0}\n` +
        `‚Ä¢ –ü–∞–º—è—Ç—å: ${system.stats?.memoryUsage || 0} MB`
      );
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ');
    }
  });

  // Settings (super admin only)
  bot.callbackQuery(/^admin_settings/, async (ctx) => {
    if (!isSuperAdmin(ctx.from?.id!)) {
      await ctx.answerCallbackQuery({ text: '–¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤', show_alert: true });
      return;
    }

    await ctx.answerCallbackQuery();
    await ctx.reply(
      `‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n` +
      `–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n` +
      `–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:\n` +
      `‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∞–º–∏\n` +
      `‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞–º–∏\n` +
      `‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤\n` +
      `‚Ä¢ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤\n` +
      `‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã\n` +
      `‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`
    );
  });
}