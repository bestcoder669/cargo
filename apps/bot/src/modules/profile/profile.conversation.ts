// apps/bot/src/modules/profile/profile.conversation.ts

import { Conversation } from '@grammyjs/conversations';
import { MyContext } from '../../core/types';
import { apiClient } from '../../core/api/client';
import { EMOJI, FormatUtils } from '@cargoexpress/shared';
import { logger } from '../../core/logger';
import { InlineKeyboard } from 'grammy';

export async function addAddressConversation(
  conversation: Conversation<MyContext>,
  ctx: MyContext
) {
  try {
    await ctx.reply(
      `üìç <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞</b>\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–î–æ–º", "–†–∞–±–æ—Ç–∞"):`,
      { reply_markup: new InlineKeyboard().text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'my_addresses') }
    );

    const nameCtx = await conversation.wait();
    if (!nameCtx.message?.text) {
      await ctx.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }
    const name = nameCtx.message.text;

    await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:`);
    const cityCtx = await conversation.wait();
    if (!cityCtx.message?.text) {
      await ctx.reply('‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }
    const cityName = cityCtx.message.text;

    await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞:`);
    const addressCtx = await conversation.wait();
    if (!addressCtx.message?.text) {
      await ctx.reply('‚ùå –ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }
    const address = addressCtx.message.text;

    await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ "-"):`);
    const postalCodeCtx = await conversation.wait();
    const postalCode = postalCodeCtx.message?.text === '-' ? undefined : postalCodeCtx.message?.text;

    await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ "-"):`);
    const phoneCtx = await conversation.wait();
    const phone = phoneCtx.message?.text === '-' ? undefined : phoneCtx.message?.text;

    await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ "-"):`);
    const recipientNameCtx = await conversation.wait();
    const recipientName = recipientNameCtx.message?.text === '-' ? undefined : recipientNameCtx.message?.text;

    // Create address
    const newAddress = await apiClient.createAddress(ctx.session.userId!, {
      name,
      cityName,
      address,
      postalCode,
      phone,
      recipientName,
      isDefault: false
    });

    await ctx.reply(
      `‚úÖ <b>–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n` +
      `${name}\n` +
      `${cityName}, ${address}\n` +
      (postalCode ? `–ò–Ω–¥–µ–∫—Å: ${postalCode}\n` : '') +
      (phone ? `–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n` : '') +
      (recipientName ? `–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${recipientName}` : ''),
      { reply_markup: new InlineKeyboard().text('üìç –ú–æ–∏ –∞–¥—Ä–µ—Å–∞', 'my_addresses') }
    );

  } catch (error) {
    logger.error('Add address conversation error:', error);
    await ctx.reply(`${EMOJI.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
  }
}

export async function editAddressConversation(
  conversation: Conversation<MyContext>,
  ctx: MyContext
) {
  try {
    const addressId = ctx.session.tempData?.addressId;
    if (!addressId) {
      await ctx.reply('‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const addresses = await apiClient.getUserAddresses(ctx.session.userId!);
    const address = addresses.find(a => a.id === addressId);

    if (!address) {
      await ctx.reply('‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const editKeyboard = new InlineKeyboard()
      .text('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', `edit_addr_confirm_${addressId}`)
      .text('‚≠ê –°–¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–º', `set_default_addr_${addressId}`).row()
      .text('üóë –£–¥–∞–ª–∏—Ç—å', `delete_addr_${addressId}`)
      .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'my_addresses');

    await ctx.reply(
      `üìç <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞</b>\n\n` +
      `<b>${address.name}</b>\n` +
      `${address.cityName}, ${address.address}\n` +
      (address.postalCode ? `–ò–Ω–¥–µ–∫—Å: ${address.postalCode}\n` : '') +
      (address.phone ? `–¢–µ–ª–µ—Ñ–æ–Ω: ${address.phone}\n` : '') +
      (address.recipientName ? `–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${address.recipientName}\n` : '') +
      (address.isDefault ? `\n‚≠ê <b>–û—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å</b>` : ''),
      { reply_markup: editKeyboard }
    );

  } catch (error) {
    logger.error('Edit address conversation error:', error);
    await ctx.reply(`${EMOJI.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–¥—Ä–µ—Å.`);
  }
}

export async function depositConversation(
  conversation: Conversation<MyContext>,
  ctx: MyContext
) {
  try {
    const paymentKeyboard = new InlineKeyboard()
      .text('üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', 'deposit_card')
      .text('‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', 'deposit_crypto').row()
      .text('üè¶ –°–ë–ü', 'deposit_sbp')
      .text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'my_balance');

    await ctx.reply(
      `üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:`,
      { reply_markup: paymentKeyboard }
    );

    const methodCtx = await conversation.wait();
    const method = methodCtx.callbackQuery?.data?.replace('deposit_', '');

    if (!method || method === 'my_balance') {
      return;
    }

    await ctx.answerCallbackQuery();

    await ctx.reply(
      `üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${method === 'card' ? '–∫–∞—Ä—Ç—É' : method === 'crypto' ? '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É' : '–°–ë–ü'}</b>\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º 100‚ÇΩ):`,
      { reply_markup: new InlineKeyboard().text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'my_balance') }
    );

    const amountCtx = await conversation.wait();
    const amountText = amountCtx.message?.text;

    if (!amountText) {
      await ctx.reply('‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π');
      return;
    }

    const amount = parseFloat(amountText);

    if (isNaN(amount) || amount < 100) {
      await ctx.reply('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 100‚ÇΩ');
      return;
    }

    // Create payment
    const payment = await apiClient.depositBalance(ctx.session.userId!, amount, method);

    const confirmKeyboard = new InlineKeyboard()
      .text('‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å', `confirm_deposit_${payment.id}`)
      .text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'my_balance');

    await ctx.reply(
      `üí∞ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n\n` +
      `–°—É–º–º–∞: ${FormatUtils.formatMoney(amount)}\n` +
      `–°–ø–æ—Å–æ–±: ${method === 'card' ? '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞' : method === 'crypto' ? '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞' : '–°–ë–ü'}\n` +
      `–ö–æ–º–∏—Å—Å–∏—è: ${FormatUtils.formatMoney(0)}\n\n` +
      `<b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: ${FormatUtils.formatMoney(amount)}</b>`,
      { reply_markup: confirmKeyboard }
    );

  } catch (error) {
    logger.error('Deposit conversation error:', error);
    await ctx.reply(`${EMOJI.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
  }
}

export async function editNameConversation(
  conversation: Conversation<MyContext>,
  ctx: MyContext
) {
  try {
    await ctx.reply(
      `üë§ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏</b>\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:`,
      { reply_markup: new InlineKeyboard().text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'settings') }
    );

    const nameCtx = await conversation.wait();
    if (!nameCtx.message?.text) {
      await ctx.reply('‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }

    const firstName = nameCtx.message.text.trim();

    logger.info(`Updating user ${ctx.session.userId} firstName to: "${firstName}"`);
    // Reset lastName to null to avoid concatenation with old lastName
    await apiClient.updateUser(ctx.session.userId!, { firstName, lastName: null });

    await ctx.reply(
      `‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: ${firstName}`,
      { reply_markup: new InlineKeyboard().text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings') }
    );

  } catch (error) {
    logger.error('Edit name conversation error:', error);
    await ctx.reply(`${EMOJI.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è.`);
  }
}

export async function editPhoneConversation(
  conversation: Conversation<MyContext>,
  ctx: MyContext
) {
  try {
    await ctx.reply(
      `üì± <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567:`,
      { reply_markup: new InlineKeyboard().text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'settings') }
    );

    const phoneCtx = await conversation.wait();
    if (!phoneCtx.message?.text) {
      await ctx.reply('‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }

    const phone = phoneCtx.message.text;

    if (!phone.match(/^\+?\d{10,15}$/)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
      return;
    }

    await apiClient.updateUser(ctx.session.userId!, { phone });

    await ctx.reply(
      `‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω`,
      { reply_markup: new InlineKeyboard().text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings') }
    );

  } catch (error) {
    logger.error('Edit phone conversation error:', error);
    await ctx.reply(`${EMOJI.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω.`);
  }
}

export async function editEmailConversation(
  conversation: Conversation<MyContext>,
  ctx: MyContext
) {
  try {
    await ctx.reply(
      `üìß <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ email</b>\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email –∞–¥—Ä–µ—Å:`,
      { reply_markup: new InlineKeyboard().text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'settings') }
    );

    const emailCtx = await conversation.wait();
    if (!emailCtx.message?.text) {
      await ctx.reply('‚ùå Email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }

    const email = emailCtx.message.text;

    if (!email.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/)) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
      return;
    }

    await apiClient.updateUser(ctx.session.userId!, { email });

    await ctx.reply(
      `‚úÖ Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${email}`,
      { reply_markup: new InlineKeyboard().text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings') }
    );

  } catch (error) {
    logger.error('Edit email conversation error:', error);
    await ctx.reply(`${EMOJI.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å email.`);
  }
}

export async function editCityConversation(
  conversation: Conversation<MyContext>,
  ctx: MyContext
) {
  try {
    await ctx.reply(
      `üèô <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞</b>\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:`,
      { reply_markup: new InlineKeyboard().text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'settings') }
    );

    const cityCtx = await conversation.wait();
    if (!cityCtx.message?.text) {
      await ctx.reply('‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }

    const cityName = cityCtx.message.text;

    // Try to find city
    const cities = await apiClient.getCities('RU');

    // Aliases for popular cities
    const cityAliases: Record<string, string[]> = {
      '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': ['–ø–∏—Ç–µ—Ä', '—Å–ø–±', '–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '–ª–µ–Ω–∏–Ω–≥—Ä–∞–¥'],
      '–ú–æ—Å–∫–≤–∞': ['–º–æ—Å–∫–≤–∞', '–º—Å–∫'],
      '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': ['–Ω–∏–∂–Ω–∏–π', '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥', '–Ω–Ω–æ–≤'],
      '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': ['–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–µ–∫–±', '–µ–∫–∞—Ç'],
      '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': ['—Ä–æ—Å—Ç–æ–≤', '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É', '—Ä–æ—Å—Ç–æ–≤ –Ω–∞ –¥–æ–Ω—É']
    };

    let city = cities.find(c => {
      const searchLower = cityName.toLowerCase().trim();
      const cityNameLower = c.name.toLowerCase();

      // Exact match
      if (cityNameLower === searchLower) return true;

      // Check aliases
      const aliases = cityAliases[c.name] || [];
      if (aliases.includes(searchLower)) return true;

      // Contains match
      return cityNameLower.includes(searchLower) || searchLower.includes(cityNameLower);
    });

    if (!city) {
      await ctx.reply(
        `‚ùå –ì–æ—Ä–æ–¥ "${cityName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.\n` +
        `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ.`
      );
      return;
    }

    await apiClient.updateUser(ctx.session.userId!, { cityId: city.id });

    await ctx.reply(
      `‚úÖ –ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${city.name}`,
      { reply_markup: new InlineKeyboard().text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings') }
    );

  } catch (error) {
    logger.error('Edit city conversation error:', error);
    await ctx.reply(`${EMOJI.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥.`);
  }
}
