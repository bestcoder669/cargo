// ==================== apps/bot/src/modules/profile/profile.handler.ts ====================

import { MyContext } from '../../core/types';
import { apiClient } from '../../core/api/client';
import { InlineKeyboard } from 'grammy';
import { 
  EMOJI, 
  FormatUtils,
  ORDER_STATUS_LABELS 
} from '@cargoexpress/shared';
import { logger } from '../../core/logger';

export async function handleProfile(ctx: MyContext) {
  try {
    if (!ctx.session.userId) {
      await ctx.reply(
        `${EMOJI.WARNING} –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n` +
        `–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.`
      );
      return;
    }
    
    const user = await apiClient.getUserProfile(ctx.session.userId);
    
    const profileKeyboard = new InlineKeyboard()
      .text('üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'my_orders')
      .text('üìç –ú–æ–∏ –∞–¥—Ä–µ—Å–∞', 'my_addresses').row()
      .text('üí∞ –ë–∞–ª–∞–Ω—Å', 'my_balance')
      .text('üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', 'referral').row()
      .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'my_stats')
      .text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings');
    
    await ctx.reply(
      `${EMOJI.PROFILE} <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n` +
      
      `üÜî <b>ID:</b> <code>${user.id}</code>\n` +
      `üë§ <b>–ò–º—è:</b> ${user.firstName} ${user.lastName || ''}\n` +
      `üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${FormatUtils.formatPhoneNumber(user.phone)}\n` +
      `üìß <b>Email:</b> ${user.email}\n` +
      `üèô <b>–ì–æ—Ä–æ–¥:</b> ${user.city?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
      
      `üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> ${FormatUtils.formatMoney(user.balance)}\n` +
      `üéÅ <b>–ë–æ–Ω—É—Å—ã:</b> ${FormatUtils.formatMoney(user.bonusBalance)}\n` +
      `üì¶ <b>–ó–∞–∫–∞–∑–æ–≤:</b> ${user.ordersCount}\n` +
      `üí∏ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> ${FormatUtils.formatMoney(user.totalSpent)}\n\n` +
      
      `üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</b> <code>${user.referralCode}</code>\n` +
      `üë• <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ:</b> ${user.referrals?.length || 0} —á–µ–ª–æ–≤–µ–∫\n\n` +
      
      `üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> ${FormatUtils.formatDate(user.registeredAt)}`,
      { reply_markup: profileKeyboard }
    );
    
  } catch (error) {
    logger.error('Profile handler error:', error);
    await ctx.reply(
      `${EMOJI.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n` +
      `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
    );
  }
}

export async function handleMyOrders(ctx: MyContext) {
  try {
    const orders = await apiClient.getUserOrders(ctx.session.userId!);
    
    if (orders.length === 0) {
      const emptyKeyboard = new InlineKeyboard()
        .text('‚úàÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É', 'shipping')
        .text('üõç –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä', 'purchase');
      
      await ctx.reply(
        `${EMOJI.PACKAGE} <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</b>\n\n` +
        `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n` +
        `–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`,
        { reply_markup: emptyKeyboard }
      );
      return;
    }
    
    // Group orders by status
    const activeOrders = orders.filter(o => 
      !['DELIVERED', 'CANCELLED', 'REFUNDED'].includes(o.status)
    );
    const completedOrders = orders.filter(o => 
      ['DELIVERED', 'CANCELLED', 'REFUNDED'].includes(o.status)
    );
    
    let message = `${EMOJI.PACKAGE} <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</b>\n\n`;
    
    if (activeOrders.length > 0) {
      message += `<b>üì¶ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n\n`;
      
      for (const order of activeOrders.slice(0, 5)) {
        message += `${FormatUtils.formatOrderId(order.id)} ‚Ä¢ ${ORDER_STATUS_LABELS[order.status]}\n`;
        message += `–¢—Ä–µ–∫: <code>${order.trackNumber}</code>\n`;
        if (order.externalTrackNumber) {
          message += `–í–Ω–µ—à–Ω–∏–π —Ç—Ä–µ–∫: <code>${order.externalTrackNumber}</code>\n`;
        }
        message += `–°–æ–∑–¥–∞–Ω: ${FormatUtils.formatDate(order.createdAt)}\n\n`;
      }
    }
    
    if (completedOrders.length > 0) {
      message += `<b>‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n\n`;
      
      for (const order of completedOrders.slice(0, 3)) {
        message += `${FormatUtils.formatOrderId(order.id)} ‚Ä¢ ${ORDER_STATUS_LABELS[order.status]}\n`;
        message += `–ó–∞–≤–µ—Ä—à–µ–Ω: ${FormatUtils.formatDate(order.deliveredAt || order.cancelledAt)}\n\n`;
      }
    }
    
    const ordersKeyboard = new InlineKeyboard();
    
    // Add buttons for active orders
    activeOrders.slice(0, 5).forEach(order => {
      ordersKeyboard.text(
        `${FormatUtils.formatOrderId(order.id)} - ${order.status}`,
        `order_details_${order.id}`
      ).row();
    });
    
    if (orders.length > 5) {
      ordersKeyboard.text('üìã –í—Å–µ –∑–∞–∫–∞–∑—ã', 'all_orders').row();
    }
    
    ordersKeyboard.text('üîç –ù–∞–π—Ç–∏ –ø–æ —Ç—Ä–µ–∫—É', 'track_search');
    
    await ctx.reply(message, { reply_markup: ordersKeyboard });
    
  } catch (error) {
    logger.error('My orders handler error:', error);
    await ctx.reply(`${EMOJI.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã.`);
  }
}

export async function handleOrderDetails(ctx: MyContext, orderId: number) {
  try {
    const order = await apiClient.getOrder(orderId);
    
    if (!order) {
      await ctx.reply(`${EMOJI.ERROR} –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      return;
    }
    
    // Check ownership
    if (order.userId !== ctx.session.userId) {
      await ctx.reply(`${EMOJI.ERROR} –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.`);
      return;
    }
    
    const detailsKeyboard = new InlineKeyboard();
    
    // Add action buttons based on status
    if (order.status === 'PENDING') {
      detailsKeyboard.text('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', `pay_order_${order.id}`).row();
      detailsKeyboard.text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', `cancel_order_${order.id}`).row();
    } else if (order.status === 'WAREHOUSE_RECEIVED') {
      detailsKeyboard.text('üì∏ –§–æ—Ç–æ –ø–æ—Å—ã–ª–∫–∏', `order_photos_${order.id}`).row();
    } else if (order.status === 'DELIVERED') {
      detailsKeyboard.text('‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', `order_review_${order.id}`).row();
    }
    
    if (order.externalTrackNumber) {
      detailsKeyboard.text('üîç –û—Ç—Å–ª–µ–¥–∏—Ç—å', `track_external_${order.id}`).row();
    }
    
    detailsKeyboard.text('üìú –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤', `order_history_${order.id}`).row();
    detailsKeyboard.text('‚¨ÖÔ∏è –ö –∑–∞–∫–∞–∑–∞–º', 'my_orders');
    
    let message = `${EMOJI.PACKAGE} <b>–ó–∞–∫–∞–∑ ${FormatUtils.formatOrderId(order.id)}</b>\n\n`;
    
    message += `<b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n`;
    message += `–¢–∏–ø: ${order.type === 'SHIPPING' ? '‚úàÔ∏è –î–æ—Å—Ç–∞–≤–∫–∞' : 'üõç –í—ã–∫—É–ø'}\n`;
    message += `–°—Ç–∞—Ç—É—Å: ${ORDER_STATUS_LABELS[order.status]}\n`;
    message += `–¢—Ä–µ–∫: <code>${order.trackNumber}</code>\n`;
    
    if (order.externalTrackNumber) {
      message += `–í–Ω–µ—à–Ω–∏–π —Ç—Ä–µ–∫: <code>${order.externalTrackNumber}</code>\n`;
    }
    
    message += `\n<b>–î–µ—Ç–∞–ª–∏:</b>\n`;
    
    if (order.type === 'SHIPPING') {
      message += `–û—Ç–∫—É–¥–∞: ${order.warehouse?.country?.flagEmoji} ${order.warehouse?.country?.name}\n`;
      message += `–°–∫–ª–∞–¥: ${order.warehouse?.name}\n`;
      message += `–í–µ—Å: ${FormatUtils.formatWeight(order.weight)}\n`;
      if (order.volumeWeight) {
        message += `–û–±—ä–µ–º–Ω—ã–π –≤–µ—Å: ${FormatUtils.formatWeight(order.volumeWeight)}\n`;
      }
      message += `–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: $${order.declaredValue}\n`;
      message += `–û–ø–∏—Å–∞–Ω–∏–µ: ${order.description}\n`;
    } else {
      message += `–¢–æ–≤–∞—Ä: ${order.productName}\n`;
      message += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.productQuantity} —à—Ç.\n`;
      if (order.productSize) {
        message += `–†–∞–∑–º–µ—Ä: ${order.productSize}\n`;
      }
      if (order.productColor) {
        message += `–¶–≤–µ—Ç: ${order.productColor}\n`;
      }
      message += `–°—Ç–æ–∏–º–æ—Å—Ç—å: $${order.purchaseCost}\n`;
    }
    
    message += `\n<b>–î–æ—Å—Ç–∞–≤–∫–∞:</b>\n`;
    message += `–ê–¥—Ä–µ—Å: ${order.address?.cityName}, ${order.address?.address}\n`;
    
    message += `\n<b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n`;
    if (order.shippingCost) {
      message += `–î–æ—Å—Ç–∞–≤–∫–∞: ${FormatUtils.formatMoney(order.shippingCost)}\n`;
    }
    if (order.commissionAmount) {
      message += `–ö–æ–º–∏—Å—Å–∏—è: ${FormatUtils.formatMoney(order.commissionAmount)}\n`;
    }
    message += `<b>–ò—Ç–æ–≥–æ: ${FormatUtils.formatMoney(order.totalAmount || 0)}</b>\n`;
    
    message += `\n<b>–î–∞—Ç—ã:</b>\n`;
    message += `–°–æ–∑–¥–∞–Ω: ${FormatUtils.formatDate(order.createdAt)}\n`;
    if (order.paidAt) {
      message += `–û–ø–ª–∞—á–µ–Ω: ${FormatUtils.formatDate(order.paidAt)}\n`;
    }
    if (order.shippedAt) {
      message += `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${FormatUtils.formatDate(order.shippedAt)}\n`;
    }
    if (order.deliveredAt) {
      message += `–î–æ—Å—Ç–∞–≤–ª–µ–Ω: ${FormatUtils.formatDate(order.deliveredAt)}\n`;
    }
    
    await ctx.reply(message, { reply_markup: detailsKeyboard });
    
  } catch (error) {
    logger.error('Order details handler error:', error);
    await ctx.reply(`${EMOJI.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞.`);
  }
}

export async function handleMyAddresses(ctx: MyContext) {
  try {
    const addresses = await apiClient.getUserAddresses(ctx.session.userId!);
    
    const addressKeyboard = new InlineKeyboard();
    
    if (addresses.length === 0) {
      await ctx.reply(
        `${EMOJI.LOCATION} <b>–ú–æ–∏ –∞–¥—Ä–µ—Å–∞</b>\n\n` +
        `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤.`,
        {
          reply_markup: addressKeyboard
            .text('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å', 'add_address')
            .row()
            .text('‚¨ÖÔ∏è –í –ø—Ä–æ—Ñ–∏–ª—å', 'profile')
        }
      );
      return;
    }
    
    let message = `${EMOJI.LOCATION} <b>–ú–æ–∏ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n`;
    
    addresses.forEach((addr, index) => {
      message += `${index + 1}. <b>${addr.name}</b> ${addr.isDefault ? '‚≠ê' : ''}\n`;
      message += `${addr.cityName}, ${addr.address}\n`;
      if (addr.postalCode) {
        message += `–ò–Ω–¥–µ–∫—Å: ${addr.postalCode}\n`;
      }
      if (addr.phone) {
        message += `–¢–µ–ª–µ—Ñ–æ–Ω: ${addr.phone}\n`;
      }
      message += '\n';
      
      addressKeyboard.text(
        `‚úèÔ∏è ${addr.name}`,
        `edit_address_${addr.id}`
      );
      
      if ((index + 1) % 2 === 0) {
        addressKeyboard.row();
      }
    });
    
    addressKeyboard.row();
    addressKeyboard.text('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å', 'add_address').row();
    addressKeyboard.text('‚¨ÖÔ∏è –í –ø—Ä–æ—Ñ–∏–ª—å', 'profile');
    
    await ctx.reply(message, { reply_markup: addressKeyboard });
    
  } catch (error) {
    logger.error('My addresses handler error:', error);
    await ctx.reply(`${EMOJI.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–¥—Ä–µ—Å–∞.`);
  }
}

export async function handleBalance(ctx: MyContext) {
  try {
    const balance = await apiClient.getUserBalance(ctx.session.userId!);
    
    const balanceKeyboard = new InlineKeyboard()
      .text('üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'deposit').row()
      .text('üìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π', 'transactions').row()
      .text('üéÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã', 'use_bonus').row()
      .text('‚¨ÖÔ∏è –í –ø—Ä–æ—Ñ–∏–ª—å', 'profile');
    
    await ctx.reply(
      `${EMOJI.BALANCE} <b>–ú–æ–π –±–∞–ª–∞–Ω—Å</b>\n\n` +
      
      `üí∞ <b>–û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å:</b> ${FormatUtils.formatMoney(balance.balance)}\n` +
      `üéÅ <b>–ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> ${FormatUtils.formatMoney(balance.bonusBalance)}\n` +
      `üîí <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:</b> ${FormatUtils.formatMoney(balance.blockedAmount || 0)}\n\n` +
      
      `<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n` +
      (balance.lastTransactions?.map(t => 
        `${t.type === 'deposit' ? '‚ûï' : '‚ûñ'} ${FormatUtils.formatMoney(t.amount)} - ${t.description}`
      ).join('\n') || '–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π'),
      { reply_markup: balanceKeyboard }
    );
    
  } catch (error) {
    logger.error('Balance handler error:', error);
    await ctx.reply(`${EMOJI.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å.`);
  }
}

