
// ==================== apps/bot/src/modules/purchase/purchase.conversation.ts ====================

import { MyContext, MyConversation } from '../../core/types';
import { apiClient } from '../../core/api/client';
import { InlineKeyboard } from 'grammy';
import { 
  EMOJI,
  OrderType,
  FormatUtils,
  ValidationUtils
} from '@cargoexpress/shared';
import { logger } from '../../core/logger';

export async function purchaseConversation(
  conversation: MyConversation,
  ctx: MyContext
) {
  try {
    ctx.session.purchaseData = {};
    
    // Choose purchase type
    const typeKeyboard = new InlineKeyboard()
      .text('üîó –ü–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —Ç–æ–≤–∞—Ä', 'type_link').row()
      .text('üõç –ò–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞', 'type_catalog').row()
      .text(`${EMOJI.BACK} –û—Ç–º–µ–Ω–∞`, 'cancel');
    
    const typeMsg = await ctx.reply(
      `${EMOJI.PURCHASE} <b>–í—ã–∫—É–ø —Ç–æ–≤–∞—Ä–∞</b>\n\n` +
      `–ú—ã –º–æ–∂–µ–º –∫—É–ø–∏—Ç—å –¥–ª—è –≤–∞—Å —Ç–æ–≤–∞—Ä —Å –ª—é–±–æ–≥–æ –∑–∞—Ä—É–±–µ–∂–Ω–æ–≥–æ —Å–∞–π—Ç–∞!\n\n` +
      `<b>–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä?</b>`,
      { reply_markup: typeKeyboard }
    );
    
    const typeCtx = await conversation.waitForCallbackQuery(/^(type_|cancel)/);
    await typeCtx.answerCallbackQuery();
    
    if (typeCtx.callbackQuery.data === 'cancel') {
      await ctx.api.deleteMessage(ctx.chat!.id, typeMsg.message_id);
      await ctx.reply('‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω');
      return;
    }
    
    const purchaseType = typeCtx.callbackQuery.data.replace('type_', '') as 'link' | 'catalog';
    ctx.session.purchaseData.type = purchaseType;
    
    if (purchaseType === 'link') {
      // Purchase by link
      await purchaseLinkFlow(conversation, ctx, typeMsg.message_id);
    } else {
      // Purchase from catalog
      await purchaseCatalogFlow(conversation, ctx, typeMsg.message_id);
    }
    
  } catch (error) {
    logger.error('Purchase conversation error:', error);
    await ctx.reply(
      `${EMOJI.ERROR} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n` +
      `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`
    );
  }
}

async function purchaseLinkFlow(
  conversation: MyConversation,
  ctx: MyContext,
  messageId: number
) {
  // Step 1: Product URL
  await ctx.api.editMessageText(
    ctx.chat!.id,
    messageId,
    `${EMOJI.PURCHASE} <b>–í—ã–∫—É–ø –ø–æ —Å—Å—ã–ª–∫–µ</b>\n\n` +
    `<b>–®–∞–≥ 1/7:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:\n\n` +
    `<i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Å–∞–π—Ç—ã: Amazon, eBay, AliExpress, Taobao –∏ –¥—Ä—É–≥–∏–µ</i>`,
    { parse_mode: 'HTML' }
  );
  
  const urlText = await conversation.form.text();
  
  if (!ValidationUtils.isValidUrl(urlText)) {
    await ctx.reply(
      `${EMOJI.ERROR} –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞.\n` +
      `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.`
    );
    return purchaseLinkFlow(conversation, ctx, messageId);
  }
  
  ctx.session.purchaseData!.productUrl = urlText;
  
  // Try to parse product info
  await ctx.reply(`${EMOJI.LOADING} –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–≤–∞—Ä...`);
  
  // TODO: Implement product parser
  // const productInfo = await parseProductUrl(urlText);
  
  // Step 2: Product name
  await ctx.reply(
    `${EMOJI.PACKAGE} <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n` +
    `<b>–®–∞–≥ 2/7:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:`
  );
  
  const productName = await conversation.form.text();
  ctx.session.purchaseData!.productName = productName;
  
  // Step 3: Quantity
  await ctx.reply(
    `${EMOJI.PACKAGE} <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>\n\n` +
    `<b>–®–∞–≥ 3/7:</b> –°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –∑–∞–∫–∞–∑–∞—Ç—å?`
  );
  
  const quantityText = await conversation.form.text();
  const quantity = parseInt(quantityText);
  
  if (isNaN(quantity) || quantity <= 0 || quantity > 100) {
    await ctx.reply(
      `${EMOJI.ERROR} –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.\n` +
      `–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.`
    );
    return purchaseLinkFlow(conversation, ctx, messageId);
  }
  
  ctx.session.purchaseData!.productQuantity = quantity;
  
  // Step 4: Size (optional)
  const sizeKeyboard = new InlineKeyboard()
    .text('–£–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä', 'size_yes')
    .text('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'size_no');
  
  await ctx.reply(
    `${EMOJI.PACKAGE} <b>–†–∞–∑–º–µ—Ä</b>\n\n` +
    `<b>–®–∞–≥ 4/7:</b> –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä?`,
    { reply_markup: sizeKeyboard }
  );
  
  const sizeCtx = await conversation.waitForCallbackQuery(/^size_/);
  await sizeCtx.answerCallbackQuery();
  
  if (sizeCtx.callbackQuery.data === 'size_yes') {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä (S, M, L, XL, 42, 44 –∏ —Ç.–¥.):');
    const size = await conversation.form.text();
    ctx.session.purchaseData!.productSize = size;
  }
  
  // Step 5: Color (optional)
  const colorKeyboard = new InlineKeyboard()
    .text('–£–∫–∞–∑–∞—Ç—å —Ü–≤–µ—Ç', 'color_yes')
    .text('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'color_no');
  
  await ctx.reply(
    `${EMOJI.PACKAGE} <b>–¶–≤–µ—Ç</b>\n\n` +
    `<b>–®–∞–≥ 5/7:</b> –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ü–≤–µ—Ç?`,
    { reply_markup: colorKeyboard }
  );
  
  const colorCtx = await conversation.waitForCallbackQuery(/^color_/);
  await colorCtx.answerCallbackQuery();
  
  if (colorCtx.callbackQuery.data === 'color_yes') {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç:');
    const color = await conversation.form.text();
    ctx.session.purchaseData!.productColor = color;
  }
  
  // Step 6: Product cost
  await ctx.reply(
    `${EMOJI.PACKAGE} <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞</b>\n\n` +
    `<b>–®–∞–≥ 6/7:</b> –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö:\n` +
    `<i>–¶–µ–Ω–∞ –∑–∞ ${quantity} —à—Ç.</i>`
  );
  
  const costText = await conversation.form.text();
  const cost = parseFloat(costText);
  
  if (isNaN(cost) || cost <= 0) {
    await ctx.reply(`${EMOJI.ERROR} –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å`);
    return purchaseLinkFlow(conversation, ctx, messageId);
  }
  
  ctx.session.purchaseData!.purchaseCost = cost;
  
  // Step 7: Additional notes
  await ctx.reply(
    `${EMOJI.PACKAGE} <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n` +
    `<b>–®–∞–≥ 7/7:</b> –ï—Å—Ç—å –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è?\n` +
    `<i>–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å</i>`
  );
  
  const note = await conversation.form.text();
  if (note !== '-') {
    ctx.session.purchaseData!.productNote = note;
  }
  
  // Select country for delivery
  const countries = await apiClient.getCountries(true);
  const purchaseCountries = countries.filter(c => c.purchaseAvailable);
  
  const countryKeyboard = new InlineKeyboard();
  purchaseCountries.forEach((country, index) => {
    const text = `${country.flagEmoji} ${country.name}`;
    countryKeyboard.text(text, `pcountry_${country.id}`);
    if ((index + 1) % 2 === 0) {
      countryKeyboard.row();
    }
  });
  
  await ctx.reply(
    `${EMOJI.LOCATION} <b>–°—Ç—Ä–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∏</b>\n\n` +
    `–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä?`,
    { reply_markup: countryKeyboard }
  );
  
  const countryCtx = await conversation.waitForCallbackQuery(/^pcountry_/);
  await countryCtx.answerCallbackQuery();
  
  const countryId = parseInt(countryCtx.callbackQuery.data.replace('pcountry_', ''));
  const country = purchaseCountries.find(c => c.id === countryId);
  ctx.session.purchaseData!.countryId = countryId;
  
  // Calculate purchase
  const calculation = await apiClient.calculatePurchase({
    countryId,
    productCost: cost,
    quantity
  });
  
  // Confirm order
  const confirmKeyboard = new InlineKeyboard()
    .text(`${EMOJI.SUCCESS} –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑`, 'confirm_purchase')
    .text(`${EMOJI.CLOSE} –û—Ç–º–µ–Ω–∏—Ç—å`, 'cancel_purchase');
  
  await ctx.reply(
    `${EMOJI.PURCHASE} <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ –≤—ã–∫—É–ø</b>\n\n` +
    
    `<b>–¢–æ–≤–∞—Ä:</b> ${productName}\n` +
    `<b>–°—Å—ã–ª–∫–∞:</b> ${urlText.substring(0, 50)}...\n` +
    `<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> ${quantity} —à—Ç.\n` +
    (ctx.session.purchaseData!.productSize ? 
      `<b>–†–∞–∑–º–µ—Ä:</b> ${ctx.session.purchaseData!.productSize}\n` : '') +
    (ctx.session.purchaseData!.productColor ?
      `<b>–¶–≤–µ—Ç:</b> ${ctx.session.purchaseData!.productColor}\n` : '') +
    `<b>–°—Ç—Ä–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∏:</b> ${country?.flagEmoji} ${country?.name}\n\n` +
    
    `${EMOJI.CALCULATOR} <b>–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:</b>\n` +
    `–¢–æ–≤–∞—Ä: ${FormatUtils.formatMoney(cost * calculation.exchangeRate)}\n` +
    `–ö–æ–º–∏—Å—Å–∏—è (${country?.purchaseCommission}%): ${FormatUtils.formatMoney(calculation.commission)}\n` +
    `–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ —Å–∫–ª–∞–¥–∞: ${FormatUtils.formatMoney(calculation.domesticShipping || 0)}\n` +
    `<b>–ò–¢–û–ì–û: ${FormatUtils.formatMoney(calculation.totalCost)}</b>\n\n` +
    
    `${EMOJI.INFO} –ü–æ—Å–ª–µ –≤—ã–∫—É–ø–∞ —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥.\n` +
    `–î–æ—Å—Ç–∞–≤–∫–∞ –≤ –†–æ—Å—Å–∏—é –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.\n\n` +
    
    `–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑?`,
    { reply_markup: confirmKeyboard }
  );
  
  const confirmCtx = await conversation.waitForCallbackQuery(/^(confirm|cancel)_purchase/);
  await confirmCtx.answerCallbackQuery();
  
  if (confirmCtx.callbackQuery.data === 'cancel_purchase') {
    await ctx.reply('‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω');
    return;
  }
  
  // Create order
  try {
    const orderData = {
      userId: ctx.session.userId,
      type: OrderType.PURCHASE,
      countryId: ctx.session.purchaseData!.countryId,
      productUrl: ctx.session.purchaseData!.productUrl,
      productName: ctx.session.purchaseData!.productName,
      productQuantity: ctx.session.purchaseData!.productQuantity,
      productSize: ctx.session.purchaseData!.productSize,
      productColor: ctx.session.purchaseData!.productColor,
      productNote: ctx.session.purchaseData!.productNote,
      purchaseCost: ctx.session.purchaseData!.purchaseCost
    };
    
    const order = await apiClient.createOrder(orderData);
    
    const paymentKeyboard = new InlineKeyboard()
      .text('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π', `pay_card_${order.id}`)
      .text('ü™ô –û–ø–ª–∞—Ç–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–π', `pay_crypto_${order.id}`).row()
      .text('üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'my_orders');
    
    await ctx.reply(
      `${EMOJI.SUCCESS} <b>–ó–∞–∫–∞–∑ –Ω–∞ –≤—ã–∫—É–ø —Å–æ–∑–¥–∞–Ω!</b>\n\n` +
      
      `<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> ${FormatUtils.formatOrderId(order.id)}\n` +
      `<b>–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä:</b> <code>${order.trackNumber}</code>\n\n` +
      
      `<b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>\n` +
      `1. –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑\n` +
      `2. –ú—ã –∫—É–ø–∏–º —Ç–æ–≤–∞—Ä –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n` +
      `3. –û—Ç–ø—Ä–∞–≤–∏–º —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è\n` +
      `4. –î–æ—Å—Ç–∞–≤–∏–º –Ω–∞ —Å–∫–ª–∞–¥ –≤ ${country?.name}\n` +
      `5. –í—ã –æ—Ñ–æ—Ä–º–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –≤ –†–æ—Å—Å–∏—é\n\n` +
      
      `<b>–ö –æ–ø–ª–∞—Ç–µ: ${FormatUtils.formatMoney(calculation.totalCost)}</b>\n\n` +
      
      `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:`,
      { reply_markup: paymentKeyboard }
    );
    
    // Clear session data
    ctx.session.purchaseData = undefined;
    
    logger.info(`Purchase order created: ${order.id} by user ${ctx.session.userId}`);
    
  } catch (error) {
    logger.error('Failed to create purchase order:', error);
    await ctx.reply(
      `${EMOJI.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑.\n` +
      `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`
    );
  }
}

async function purchaseCatalogFlow(
  conversation: MyConversation,
  ctx: MyContext,
  messageId: number
) {
  // Select country
  const countries = await apiClient.getCountries(true);
  const catalogCountries = countries.filter(c => 
    c.purchaseAvailable && c.products?.length > 0
  );
  
  if (catalogCountries.length === 0) {
    await ctx.reply(
      `${EMOJI.ERROR} –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n` +
      `–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä –ø–æ —Å—Å—ã–ª–∫–µ.`
    );
    return;
  }
  
  const countryKeyboard = new InlineKeyboard();
  catalogCountries.forEach((country, index) => {
    const text = `${country.flagEmoji} ${country.name}`;
    countryKeyboard.text(text, `catalog_country_${country.id}`);
    if ((index + 1) % 2 === 0) {
      countryKeyboard.row();
    }
  });
  
  await ctx.api.editMessageText(
    ctx.chat!.id,
    messageId,
    `${EMOJI.PURCHASE} <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n` +
    `–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:`,
    {
      reply_markup: countryKeyboard,
      parse_mode: 'HTML'
    }
  );
  
  const countryCtx = await conversation.waitForCallbackQuery(/^catalog_country_/);
  await countryCtx.answerCallbackQuery();
  
  const countryId = parseInt(countryCtx.callbackQuery.data.replace('catalog_country_', ''));
  
  // Get categories
  const categories = await apiClient.getProductCategories(countryId);
  
  const categoryKeyboard = new InlineKeyboard();
  categories.forEach((category) => {
    const text = `${category.icon} ${category.name}`;
    categoryKeyboard.text(text, `catalog_cat_${category.id}`).row();
  });
  categoryKeyboard.text(`${EMOJI.BACK} –ù–∞–∑–∞–¥`, 'back_to_countries');
  
  await ctx.api.editMessageText(
    ctx.chat!.id,
    messageId,
    `${EMOJI.PURCHASE} <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:</b>`,
    {
      reply_markup: categoryKeyboard,
      parse_mode: 'HTML'
    }
  );
  
  const categoryCtx = await conversation.waitForCallbackQuery(/^catalog_cat_/);
  await categoryCtx.answerCallbackQuery();
  
  const categoryId = parseInt(categoryCtx.callbackQuery.data.replace('catalog_cat_', ''));
  
  // Get products
  const products = await apiClient.getProducts({
    countryId,
    categoryId,
    limit: 10
  });
  
  if (!products.items || products.items.length === 0) {
    await ctx.reply(
      `${EMOJI.ERROR} –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.\n` +
      `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ.`
    );
    return;
  }
  
  // Show products carousel
  for (const product of products.items) {
    const productKeyboard = new InlineKeyboard()
      .text('üõí –ó–∞–∫–∞–∑–∞—Ç—å', `order_product_${product.id}`)
      .text('‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ', `info_product_${product.id}`).row()
      .text('‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π', 'next_product');
    
    await ctx.reply(
      `${product.imageUrl ? `<a href="${product.imageUrl}">‚Äã</a>` : ''}`  +
      `<b>${product.name}</b>\n\n` +
      `üí∞ <b>–¶–µ–Ω–∞:</b> ${FormatUtils.formatMoney(product.price * 90)}\n` +
      (product.oldPrice ? `<s>${FormatUtils.formatMoney(product.oldPrice * 90)}</s>\n` : '') +
      `‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> ${product.rating}/5 (${product.reviewCount} –æ—Ç–∑—ã–≤–æ–≤)\n` +
      `üì¶ <b>–ü—Ä–æ–¥–∞–Ω–æ:</b> ${product.soldCount} —à—Ç.\n\n` +
      `${product.description?.substring(0, 200)}...`,
      { 
        reply_markup: productKeyboard,
        parse_mode: 'HTML'
      }
    );
    
    const productCtx = await conversation.waitForCallbackQuery();
    await productCtx.answerCallbackQuery();
    
    if (productCtx.callbackQuery.data.startsWith('order_product_')) {
      const productId = parseInt(productCtx.callbackQuery.data.replace('order_product_', ''));
      const selectedProduct = products.items.find(p => p.id === productId);
      
      ctx.session.purchaseData = {
        type: 'catalog',
        productId,
        productName: selectedProduct.name,
        purchaseCost: selectedProduct.price,
        countryId,
        productQuantity: 1
      };
      
      // Continue with order creation...
      // Similar to link flow
      break;
    }
  }
}