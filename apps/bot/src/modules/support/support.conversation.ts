// ==================== apps/bot/src/modules/support/support.conversation.ts ====================

import { MyContext, MyConversation } from '../../core/types';
import { apiClient } from '../../core/api/client';
import { wsClient } from '../../core/websocket/client';
import { Keyboard, InlineKeyboard } from 'grammy';
import { EMOJI, SocketEvents } from '@cargoexpress/shared';
import { logger } from '../../core/logger';

export async function supportConversation(
  conversation: MyConversation,
  ctx: MyContext
) {
  try {
    // Check for existing open chat
    const chats = await apiClient.getUserSupportChats(ctx.session.userId!);
    const openChat = chats.find(c => c.status !== 'CLOSED');
    
    if (openChat) {
      // Continue existing chat
      await continueSupportChat(conversation, ctx, openChat);
    } else {
      // Start new chat
      await startNewSupportChat(conversation, ctx);
    }
    
  } catch (error) {
    logger.error('Support conversation error:', error);
    await ctx.reply(
      `${EMOJI.ERROR} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n` +
      `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
    );
  }
}

async function startNewSupportChat(
  conversation: MyConversation,
  ctx: MyContext
) {
  const topicsKeyboard = new InlineKeyboard()
    .text('üì¶ –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º', 'topic_order').row()
    .text('üí≥ –í–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ', 'topic_payment').row()
    .text('üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏ —Ç–∞—Ä–∏—Ñ—ã', 'topic_shipping').row()
    .text('üí¨ –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å', 'topic_other').row()
    .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel');
  
  const topicMsg = await ctx.reply(
    `${EMOJI.SUPPORT} <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n` +
    `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è:`,
    { reply_markup: topicsKeyboard }
  );
  
  const topicCtx = await conversation.waitForCallbackQuery(/^(topic_|cancel)/);
  await topicCtx.answerCallbackQuery();
  
  if (topicCtx.callbackQuery.data === 'cancel') {
    await ctx.api.deleteMessage(ctx.chat!.id, topicMsg.message_id);
    await ctx.reply('–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
    return;
  }
  
  const topic = topicCtx.callbackQuery.data.replace('topic_', '');
  const topicNames = {
    order: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º',
    payment: '–í–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ',
    shipping: '–î–æ—Å—Ç–∞–≤–∫–∞ –∏ —Ç–∞—Ä–∏—Ñ—ã',
    other: '–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å'
  };
  
  await ctx.api.editMessageText(
    ctx.chat!.id,
    topicMsg.message_id,
    `${EMOJI.SUPPORT} <b>–¢–µ–º–∞: ${topicNames[topic]}</b>\n\n` +
    `–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ.\n` +
    `–ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.`,
    { parse_mode: 'HTML' }
  );
  
  // Wait for message
  const messageCtx = await conversation.wait();
  
  let messageText = '';
  let attachments = [];
  
  if (messageCtx.message?.text) {
    messageText = messageCtx.message.text;
  } else if (messageCtx.message?.photo) {
    const photo = messageCtx.message.photo[messageCtx.message.photo.length - 1];
    attachments.push({
      type: 'photo',
      fileId: photo.file_id
    });
    messageText = messageCtx.message.caption || '–§–æ—Ç–æ';
  } else if (messageCtx.message?.document) {
    attachments.push({
      type: 'document',
      fileId: messageCtx.message.document.file_id,
      name: messageCtx.message.document.file_name
    });
    messageText = messageCtx.message.caption || '–î–æ–∫—É–º–µ–Ω—Ç';
  }
  
  // Create support chat
  const chat = await apiClient.createSupportChat(
    ctx.session.userId!,
    messageText,
    topicNames[topic]
  );
  
  // Send via WebSocket to admin panel
  wsClient.emit(SocketEvents.SUPPORT_NEW_MESSAGE, {
    chatId: chat.id,
    userId: ctx.session.userId,
    message: messageText,
    attachments
  });
  
  const exitKeyboard = new Keyboard()
    .text('‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç')
    .resized();
  
  await ctx.reply(
    `${EMOJI.SUCCESS} <b>–ß–∞—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n` +
    `–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: #${chat.id}\n` +
    `–û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n` +
    `–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.`,
    { reply_markup: exitKeyboard }
  );
  
  // Continue chat
  await continueSupportChat(conversation, ctx, chat);
}

async function continueSupportChat(
  conversation: MyConversation,
  ctx: MyContext,
  chat: any
) {
  await ctx.reply(
    `${EMOJI.SUPPORT} <b>–ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ #${chat.id}</b>\n\n` +
    `–°—Ç–∞—Ç—É—Å: ${chat.status === 'WAITING' ? '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞' : 'üí¨ –í —Ä–∞–±–æ—Ç–µ'}\n` +
    `–û–ø–µ—Ä–∞—Ç–æ—Ä ${chat.status === 'IN_PROGRESS' ? '–ø–æ–¥–∫–ª—é—á–µ–Ω' : '—Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç'}\n\n` +
    `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç":`
  );
  
  // Listen for WebSocket events
  const handleAdminReply = (data: any) => {
    if (data.chatId === chat.id) {
      ctx.reply(
        `${EMOJI.SUPPORT} <b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b>\n${data.message}`
      );
    }
  };
  
  wsClient.on('support:admin_reply', handleAdminReply);
  
  // Chat loop
  while (true) {
    const msgCtx = await conversation.wait();
    
    if (msgCtx.message?.text === '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç') {
      // Close chat
      await ctx.reply(
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç?',
        {
          reply_markup: new InlineKeyboard()
            .text('‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å', 'confirm_close')
            .text('‚ùå –ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'cancel_close')
        }
      );
      
      const closeCtx = await conversation.waitForCallbackQuery(/^(confirm|cancel)_close/);
      await closeCtx.answerCallbackQuery();
      
      if (closeCtx.callbackQuery.data === 'confirm_close') {
        wsClient.emit('support:chat_closed', { chatId: chat.id });
        wsClient.off('support:admin_reply', handleAdminReply);
        
        await ctx.reply(
          `${EMOJI.SUCCESS} –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.\n` +
          `–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!\n\n` +
          `–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:`,
          {
            reply_markup: new InlineKeyboard()
              .text('‚≠ê', 'rate_1')
              .text('‚≠ê‚≠ê', 'rate_2')
              .text('‚≠ê‚≠ê‚≠ê', 'rate_3')
              .text('‚≠ê‚≠ê‚≠ê‚≠ê', 'rate_4')
              .text('‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê', 'rate_5'),
            ...{ remove_keyboard: true }
          }
        );
        
        const rateCtx = await conversation.waitForCallbackQuery(/^rate_/);
        const rating = parseInt(rateCtx.callbackQuery.data.replace('rate_', ''));
        await rateCtx.answerCallbackQuery('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!');
        
        // Save rating
        await apiClient.rateSupportChat(chat.id, rating);
        
        break;
      }
    } else if (msgCtx.message?.text) {
      // Send message to support
      await apiClient.sendSupportMessage(chat.id, msgCtx.message.text);
      
      // Send via WebSocket
      wsClient.emit(SocketEvents.SUPPORT_NEW_MESSAGE, {
        chatId: chat.id,
        userId: ctx.session.userId,
        message: msgCtx.message.text,
        fromUser: true
      });
      
      await ctx.reply('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    } else if (msgCtx.message?.photo || msgCtx.message?.document) {
      // Handle attachments
      const attachments = [];
      
      if (msgCtx.message.photo) {
        const photo = msgCtx.message.photo[msgCtx.message.photo.length - 1];
        attachments.push({
          type: 'photo',
          fileId: photo.file_id
        });
      } else if (msgCtx.message.document) {
        attachments.push({
          type: 'document',
          fileId: msgCtx.message.document.file_id,
          name: msgCtx.message.document.file_name
        });
      }
      
      await apiClient.sendSupportMessage(
        chat.id,
        msgCtx.message.caption || '–í–ª–æ–∂–µ–Ω–∏–µ',
        attachments
      );
      
      await ctx.reply('‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    }
  }
  
  wsClient.off('support:admin_reply', handleAdminReply);
}

